<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VictorHolmes Blog</title>
  
  <subtitle>Hexo Blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-06-30T00:39:07.321Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victor holmes</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bustub</title>
    <link href="http://example.com/2025/06/29/bustub/"/>
    <id>http://example.com/2025/06/29/bustub/</id>
    <published>2025-06-29T06:06:55.000Z</published>
    <updated>2025-06-30T00:39:07.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Project-0-Primer"><a href="#Project-0-Primer" class="headerlink" title="Project 0 Primer"></a>Project 0 Primer</h1><h2 id="C-basic"><a href="#C-basic" class="headerlink" title="C++ basic"></a>C++ basic</h2><h3 id="std-string-vs-std-string-view"><a href="#std-string-vs-std-string-view" class="headerlink" title="std::string vs std::string_view"></a><em>std::string vs std::string_view</em></h3><p><strong>std::string</strong><br>keys of features</p><ul><li>dynamic memory allocation</li><li>mutable operation</li><li>wide range of member functions</li></ul><p><strong>std::string_view</strong><br>keys of features</p><ul><li>non-owing view : provide view or reference to an existing string</li><li>light weight and efficient : assign or copy string_view is fast cause it only need to consider the reference ,length and start position of the string</li><li>immutable operations : if someone just need to read the string ,should use the std::string_view</li></ul><h3 id="std-lock-guard-and-std-mutex"><a href="#std-lock-guard-and-std-mutex" class="headerlink" title="std::lock_guard and std::mutex"></a><em>std::lock_guard and std::mutex</em></h3><p><strong>std::mutex</strong><br>A std::mutex (short for “mutual exclusion”) is a synchronization primitive used to protect shared data from being accessed concurrently by multiple threads.<br>std::mutex example</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMessage</span><span class="params">(<span class="type">const</span> std::string&amp; msg)</span> </span>&#123;</span><br><span class="line">    mtx.<span class="built_in">lock</span>();  <span class="comment">// Lock the mutex</span></span><br><span class="line">    std::cout &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class="line">    mtx.<span class="built_in">unlock</span>();  <span class="comment">// Unlock the mutex</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(printMessage, <span class="string">&quot;Hello from thread 1&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(printMessage, <span class="string">&quot;Hello from thread 2&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>std::lock_guard</strong><br>std::lock_guard is a RAII-style (Resource Acquisition Is Initialization) wrapper for std::mutex. It automatically locks the mutex when it’s constructed and unlocks it when it goes out of scope.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMessage</span><span class="params">(<span class="type">const</span> std::string&amp; msg)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(mtx)</span></span>;  <span class="comment">// Mutex is locked here</span></span><br><span class="line">    std::cout &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// Mutex will automatically be unlocked when guard goes out of scope</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(printMessage, <span class="string">&quot;Hello from thread 1&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(printMessage, <span class="string">&quot;Hello from thread 2&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Generate-executable-program"><a href="#Generate-executable-program" class="headerlink" title="Generate executable program"></a>Generate executable program</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># First, git clone the project from the github or you could fork this to your own repository and then pull the project</span></span><br><span class="line">$ git <span class="built_in">clone</span> --bare https://github.com/cmu-db/bustub.git bustub-public</span><br><span class="line"></span><br><span class="line"><span class="comment"># Second, go to the directory of the repository,the name if not fixed if you pull your own project</span></span><br><span class="line">$ <span class="built_in">cd</span> bustub-public</span><br><span class="line"></span><br><span class="line"><span class="comment"># Third, build the project</span></span><br><span class="line">$ <span class="built_in">mkdir</span> build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>when on the third step,you could meet some problem which i met in my mac computer which is located at the third_party directory under the project root path.The detail is that the minimum version of the makefile should be 3.5 rather than 3.0. This problem only occur in my mac,but when it build in the linux, it disappear.</p><p><img src="/2025/06/29/bustub/buildProblem.png" alt="build-problem"></p><h2 id="Primer-level"><a href="#Primer-level" class="headerlink" title="Primer level"></a>Primer level</h2><p>This conclude the basic structure of the project which contains Trie ,SkipList, Hyperloglog, ORSet</p><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><p>Tries — or prefix trees — are useful for sequential word search. Common features like autocomplete or spell-checking are more efficient when implemented with a prefix tree.</p><p>Here’s the structure of Tries:<br><img src="/2025/06/29/bustub/trie-example.png" alt="trie-structure"></p><p>Trie Implementation</p><h4 id="Core-Trie-Immutable"><a href="#Core-Trie-Immutable" class="headerlink" title="Core Trie (Immutable)"></a>Core Trie (Immutable)</h4><p>The path is as following:<br><img src="/2025/06/29/bustub/trie_path.png" alt="trie source path"></p><ul><li>Get(key) → Find value by key</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">Trie::Get</span><span class="params">(std::string_view key)</span> <span class="type">const</span> -&gt; <span class="type">const</span> T * </span>&#123;</span><br><span class="line">  <span class="comment">// Start from root</span></span><br><span class="line">  <span class="keyword">auto</span> current_node = root_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Walk through the trie following the key characters</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">char</span> c : key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current_node == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it = current_node-&gt;children_.<span class="built_in">find</span>(c);</span><br><span class="line">    <span class="keyword">if</span> (it == current_node-&gt;children_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    current_node = it-&gt;second;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if we found a node and if it has a value</span></span><br><span class="line">  <span class="keyword">if</span> (current_node == <span class="literal">nullptr</span> || !current_node-&gt;is_value_node_) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Try to cast to the expected type</span></span><br><span class="line">  <span class="keyword">auto</span> node_with_value = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;T&gt;*&gt;(current_node.<span class="built_in">get</span>());</span><br><span class="line">  <span class="keyword">if</span> (node_with_value == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;  <span class="comment">// Type mismatch</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> node_with_value-&gt;value_.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Put(key, value) → Insert&#x2F;update (creates new trie)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">Trie::Put</span><span class="params">(std::string_view key, T value)</span> <span class="type">const</span> -&gt; Trie </span>&#123;</span><br><span class="line">  <span class="comment">// Note that `T` might be a non-copyable type. Always use `std::move` when creating `shared_ptr` on that value.</span></span><br><span class="line"><span class="comment">//  throw NotImplementedException(&quot;Trie::Put is not implemented.&quot;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// You should walk through the trie and create new nodes if necessary. If the node corresponding to the key already</span></span><br><span class="line">  <span class="comment">// exists, you should create a new `TrieNodeWithValue`.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> value_ptr = std::<span class="built_in">make_shared</span>&lt;T&gt;(std::<span class="built_in">move</span>(value));</span><br><span class="line">  std::function&lt;std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;(std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;, std::string_view)&gt; put_recursive =</span><br><span class="line">      [&amp;](std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; current_node, std::string_view remaining_key) -&gt; std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; &#123;</span><br><span class="line">    <span class="comment">// Base case: we&#x27;ve consumed all characters in the key</span></span><br><span class="line">    <span class="keyword">if</span>(remaining_key.<span class="built_in">empty</span>())&#123;</span><br><span class="line">      <span class="keyword">if</span>(current_node == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="comment">// create a new TrieNode with no children</span></span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;T&gt;&gt;(value_ptr);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// create a new TrieNodeWithValue with existing children but new/updated value</span></span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;T&gt;&gt;(current_node-&gt;children_, value_ptr);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursive case: consume one character and recurse</span></span><br><span class="line">    <span class="type">char</span> next_char = remaining_key[<span class="number">0</span>];</span><br><span class="line">    std::string_view rest_key = remaining_key.<span class="built_in">substr</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// Get current children (or empty map if no current node)</span></span><br><span class="line">    std::map&lt;<span class="type">char</span>, std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;&gt; new_children;</span><br><span class="line">    <span class="keyword">if</span>(current_node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      new_children = current_node-&gt;children_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find the child for the next character</span></span><br><span class="line">    <span class="keyword">auto</span> child_it = new_children.<span class="built_in">find</span>(next_char); <span class="comment">// when meeting the crossroad,choose corresponding child</span></span><br><span class="line">    std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; child_node = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(child_it != new_children.<span class="built_in">end</span>()) &#123;</span><br><span class="line">      child_node = child_it-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// recursively process the child</span></span><br><span class="line">    new_children[next_char] = <span class="built_in">put_recursive</span>(child_node, rest_key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// return the path node here</span></span><br><span class="line">    <span class="comment">// Create a new node with the updated children</span></span><br><span class="line">    <span class="keyword">if</span> (current_node == <span class="literal">nullptr</span> || !current_node-&gt;is_value_node_) &#123;</span><br><span class="line">      <span class="comment">// No current node or current node has no value -&gt; create regular TrieNode</span></span><br><span class="line">      <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(std::<span class="built_in">move</span>(new_children));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Current node has a value -&gt; we need to preserve it while updating children</span></span><br><span class="line">      <span class="comment">// We&#x27;ll try to cast to the known instantiated types and preserve the value</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Try uint32_t</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_uint32 = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint32_t</span>&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint32_t</span>&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_uint32-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try uint64_t</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_uint64 = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint64_t</span>&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint64_t</span>&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_uint64-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try std::string</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_string = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;std::string&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;std::string&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_string-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try std::unique_ptr&lt;uint32_t&gt;</span></span><br><span class="line">      <span class="keyword">using</span> Integer = std::unique_ptr&lt;<span class="type">uint32_t</span>&gt;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_int_ptr = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;Integer&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;Integer&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_int_ptr-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try MoveBlocked</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_move_blocked = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;MoveBlocked&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;MoveBlocked&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_move_blocked-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If none of the known types match, create a regular TrieNode (losing the value)</span></span><br><span class="line">      <span class="comment">// This shouldn&#x27;t happen with the current explicit instantiations</span></span><br><span class="line">      <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(std::<span class="built_in">move</span>(new_children));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li>Remove(key) → Delete key (creates new trie)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">Trie::Remove</span><span class="params">(std::string_view key)</span> <span class="type">const</span> -&gt; Trie </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (root_ == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;  <span class="comment">// Empty trie, nothing to remove</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::function&lt;std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;(std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;, std::string_view)&gt; remove_recursive =</span><br><span class="line">      [&amp;](std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; current_node, std::string_view remaining_key) -&gt; std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If current node is null, key doesn&#x27;t exist</span></span><br><span class="line">    <span class="keyword">if</span> (current_node == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Base case: we&#x27;ve consumed all characters in the key</span></span><br><span class="line">    <span class="keyword">if</span> (remaining_key.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">      <span class="comment">// This is the node we want to remove the value from</span></span><br><span class="line">      <span class="keyword">if</span> (!current_node-&gt;is_value_node_) &#123;</span><br><span class="line">        <span class="comment">// Key doesn&#x27;t exist (no value at this node)</span></span><br><span class="line">        <span class="keyword">return</span> current_node;  <span class="comment">// Return unchanged</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Remove the value by converting to regular TrieNode</span></span><br><span class="line">      <span class="keyword">if</span> (current_node-&gt;children_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">// No children, remove this node entirely</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Has children, keep as regular TrieNode without value</span></span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(current_node-&gt;children_);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursive case: consume one character and recurse</span></span><br><span class="line">    <span class="type">char</span> next_char = remaining_key[<span class="number">0</span>];</span><br><span class="line">    std::string_view rest_key = remaining_key.<span class="built_in">substr</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the child for the next character</span></span><br><span class="line">    <span class="keyword">auto</span> child_it = current_node-&gt;children_.<span class="built_in">find</span>(next_char);</span><br><span class="line">    <span class="keyword">if</span> (child_it == current_node-&gt;children_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">      <span class="comment">// Key doesn&#x27;t exist</span></span><br><span class="line">      <span class="keyword">return</span> current_node;  <span class="comment">// Return unchanged</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursively process the child</span></span><br><span class="line">    <span class="keyword">auto</span> new_child = <span class="built_in">remove_recursive</span>(child_it-&gt;second, rest_key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create new children map</span></span><br><span class="line">    std::map&lt;<span class="type">char</span>, std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;&gt; new_children = current_node-&gt;children_;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (new_child == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="comment">// Child was removed, remove it from children map</span></span><br><span class="line">      new_children.<span class="built_in">erase</span>(next_char);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Update the child</span></span><br><span class="line">      new_children[next_char] = new_child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decide what to return based on current node&#x27;s state</span></span><br><span class="line">    <span class="keyword">if</span> (current_node-&gt;is_value_node_) &#123;</span><br><span class="line">      <span class="comment">// Current node has a value, preserve it with updated children</span></span><br><span class="line">      <span class="comment">// Try to cast to the known instantiated types and preserve the value</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Try uint32_t</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_uint32 = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint32_t</span>&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint32_t</span>&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_uint32-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try uint64_t</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_uint64 = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint64_t</span>&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint64_t</span>&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_uint64-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try std::string</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_string = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;std::string&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;std::string&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_string-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try std::unique_ptr&lt;uint32_t&gt;</span></span><br><span class="line">      <span class="keyword">using</span> Integer = std::unique_ptr&lt;<span class="type">uint32_t</span>&gt;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_int_ptr = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;Integer&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;Integer&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_int_ptr-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try MoveBlocked</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_move_blocked = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;MoveBlocked&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;MoveBlocked&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_move_blocked-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Fallback - create regular TrieNode (shouldn&#x27;t happen with explicit instantiations)</span></span><br><span class="line">      <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(std::<span class="built_in">move</span>(new_children));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Current node has no value</span></span><br><span class="line">      <span class="keyword">if</span> (new_children.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">// No value and no children, remove this node</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No value but has children, keep as regular TrieNode</span></span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(std::<span class="built_in">move</span>(new_children));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> new_root = <span class="built_in">remove_recursive</span>(root_, key);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Trie</span>(new_root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TrieStore-Thread-Safe-Wrapper"><a href="#TrieStore-Thread-Safe-Wrapper" class="headerlink" title="TrieStore (Thread-Safe Wrapper)"></a>TrieStore (Thread-Safe Wrapper)</h4><p>Get(key) → Thread-safe read with ValueGuard</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">TrieStore::Get</span><span class="params">(std::string_view key)</span> -&gt; std::optional&lt;ValueGuard&lt;T&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// Pseudo-code:</span></span><br><span class="line">  <span class="comment">// (1) Take the root lock, get the root, and release the root lock. Don&#x27;t lookup the value in the</span></span><br><span class="line">  <span class="comment">//     trie while holding the root lock.</span></span><br><span class="line">  Trie root_snapshot;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(root_lock_)</span></span>;</span><br><span class="line">    root_snapshot = root_;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// (2) Lookup the value in the trie.</span></span><br><span class="line">  <span class="type">const</span> T* value_ptr = root_snapshot.<span class="built_in">Get</span>&lt;T&gt;(key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (3) If the value is found, return a ValueGuard object that holds a reference to the value and the</span></span><br><span class="line">  <span class="comment">//     root. Otherwise, return std::nullopt.</span></span><br><span class="line">  <span class="keyword">if</span>(value_ptr == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="literal">nullopt</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">ValueGuard</span>&lt;T&gt;(std::<span class="built_in">move</span>(root_snapshot), *value_ptr);</span><br><span class="line"><span class="comment">//  throw NotImplementedException(&quot;TrieStore::Get is not implemented.&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Put(key, value) → Thread-safe write</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrieStore::Put</span><span class="params">(std::string_view key, T value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// You will need to ensure there is only one writer at a time. Think of how you can achieve this.</span></span><br><span class="line">  <span class="comment">// The logic should be somehow similar to `TrieStore::Get`.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Acquire the write lock to ensure only one writer at a time</span></span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">write_guard</span><span class="params">(write_lock_)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the current root</span></span><br><span class="line">  Trie current_root;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">root_guard</span><span class="params">(root_lock_)</span></span>;</span><br><span class="line">    current_root = root_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create new trie with the inserted value</span></span><br><span class="line">  Trie new_root = current_root.<span class="built_in">Put</span>&lt;T&gt;(key, std::<span class="built_in">move</span>(value));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update the root</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">root_guard</span><span class="params">(root_lock_)</span></span>;</span><br><span class="line">    root_ = std::<span class="built_in">move</span>(new_root);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//  throw NotImplementedException(&quot;TrieStore::Put is not implemented.&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Remove(key) → Thread-safe delete</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrieStore::Remove</span><span class="params">(std::string_view key)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// You will need to ensure there is only one writer at a time. Think of how you can achieve this.</span></span><br><span class="line">  <span class="comment">// The logic should be somehow similar to `TrieStore::Get`.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Acquire write lock to ensure only one writer at a time</span></span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">write_guard</span><span class="params">(write_lock_)</span></span>;  <span class="comment">// to wait</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the current root</span></span><br><span class="line">  Trie current_root;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">root_guard</span><span class="params">(root_lock_)</span></span>; <span class="comment">// to wait</span></span><br><span class="line">    current_root = root_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create new trie with the key removed</span></span><br><span class="line">  Trie new_root = current_root.<span class="built_in">Remove</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update the root</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">root_guard</span><span class="params">(root_lock_)</span></span>; <span class="comment">// to wait</span></span><br><span class="line">    root_ = std::<span class="built_in">move</span>(new_root);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//  throw NotImplementedException(&quot;TrieStore::Remove is not implemented.&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><p>The current path is located at the root of the project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">make trie_store_test trie_store_noncopy_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test basic functionality</span></span><br><span class="line">./test/trie_store_test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Test with non-copyable types</span></span><br><span class="line">./test/trie_store_noncopy_test</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Project-0-Primer&quot;&gt;&lt;a href=&quot;#Project-0-Primer&quot; class=&quot;headerlink&quot; title=&quot;Project 0 Primer&quot;&gt;&lt;/a&gt;Project 0 Primer&lt;/h1&gt;&lt;h2 id=&quot;C-basic&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CGLIB</title>
    <link href="http://example.com/2025/06/16/CGLIB/"/>
    <id>http://example.com/2025/06/16/CGLIB/</id>
    <published>2025-06-16T06:32:40.000Z</published>
    <updated>2025-06-16T07:04:40.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Proxy-in-Java"><a href="#Proxy-in-Java" class="headerlink" title="Proxy in Java"></a>Proxy in Java</h3><p><strong>Preface</strong></p><p>In Java, especially within the Spring Boot framework, proxies are commonly used to implement logic such as logging, authentication, or adding new features without modifying the original class. Two common proxy techniques used for these purposes are JDK dynamic proxy and CGLIB.</p><h4 id="JDK-Dynamic-Proxy-in-java"><a href="#JDK-Dynamic-Proxy-in-java" class="headerlink" title="JDK Dynamic Proxy in java"></a>JDK Dynamic Proxy in java</h4><p>JDK dynamic proxy is used for classes that implements interfaces, and it does not require importing any additional libraries.It works by creating a proxy instance at runtime that implements the same interfaces as the target class,delegating method calls to an <em>InvocationHandler</em>. This approach is simple and efficient but is limited to interfaces-if the target class does not implement an interface,JDK dynamic proxy cannot be used.</p><p>code example:</p><p>1.interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(String username)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.implementation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding user: &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Deleting user: &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.invocation handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoggingHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is being called with arguments: &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);  <span class="comment">// Delegates to actual method</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; execution finished.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Create the original object</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a proxy for the UserService interface</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance(</span><br><span class="line">                userService.getClass().getClassLoader(),</span><br><span class="line">                userService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(userService) <span class="comment">// specify the InvocationHandler and the target of the handler</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call methods on the proxy</span></span><br><span class="line">        proxy.addUser(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">        proxy.deleteUser(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="CGLIB"><a href="#CGLIB" class="headerlink" title="CGLIB"></a>CGLIB</h4><p>CGLIB (Code Generation Library) is a popular technique for creating proxies in Java. Unlike JDK dynamic proxies, which require the target class to implement an interface, CGLIB proxies work by subclassing the target class. The proxy class extends the target class and overrides its methods, allowing for interception of method calls.</p><p>CGLIB is used for proxying concrete classes (i.e., classes that do not implement interfaces). This can be especially useful in situations where we need to proxy a class that does not have interfaces but still requires additional behavior like logging or transaction management.</p><p>One important thing to note about CGLIB proxies is that they can only be applied to non-final classes and methods. If a class or its methods are marked as final, CGLIB cannot create a subclass of it, and proxying will fail.</p><p>CGLIB proxies are typically created using the Enhancer class from the CGLIB library. In Spring, this is often done automatically when proxying classes that don’t implement interfaces.</p><p>Code Example</p><p>1.Include CGLIB Dependency</p><p>If you’re using Maven, make sure to include the CGLIB dependency in your pom.xml file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.Target Class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> &#123; <span class="comment">// what you need to focus on is that the userServiceImpl is not a implementation of any interface</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding user: &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Deleting user: &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.test<br>CGLIB Proxy Example</p><p>The Enhancer class from CGLIB allows us to create a proxy of the UserServiceImpl class. We can also specify an MethodInterceptor to intercept method calls on the proxy object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Create the original object (target class)</span></span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create CGLIB proxy for UserServiceImpl</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(UserServiceImpl.class); <span class="comment">// Set the target class to subclass</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">// Pre-method logic: Logging</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is being called with arguments: &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Call the original method on the target class</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodProxy.invokeSuper(proxy, args); <span class="comment">// Calls the original method</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Post-method logic: Logging</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; execution finished.&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the proxy instance</span></span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserServiceImpl) enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call methods on the proxy</span></span><br><span class="line">        proxy.addUser(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">        proxy.deleteUser(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Proxy-in-Java&quot;&gt;&lt;a href=&quot;#Proxy-in-Java&quot; class=&quot;headerlink&quot; title=&quot;Proxy in Java&quot;&gt;&lt;/a&gt;Proxy in Java&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hyperloglog</title>
    <link href="http://example.com/2025/03/07/hyperloglog/"/>
    <id>http://example.com/2025/03/07/hyperloglog/</id>
    <published>2025-03-07T08:25:15.000Z</published>
    <updated>2025-03-07T09:17:05.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HyperLoglog"><a href="#HyperLoglog" class="headerlink" title="HyperLoglog"></a>HyperLoglog</h2><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>With millions of users clicking on websites randomly, tracking the number of clicks can be a challenge.This is where HyperLogLog comes in to help efficiently handle the problem.</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>he HyperLogLog(HLL) is a probablistic data structure that tracks the cardinality of large data sets which do not have duplicates.It is used for counting unique items in a massive data stream without explicitly storing every item.</p><h3 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h3><p>Considering a simple example of how it works using the string “A great database is a great life”.</p><ul><li>First, the string is hash to produce a hash value, and then convert into binary format.</li><li>Second, extract b bits from the binary value above as register value.</li><li>Third, get the position of the leftmost 1 from the remaining set of bits.<br>Acquire the max of position and register value as the final register value.</li><li>Finally, after all the elements are added, use the formula below to get the result we want<br><img src="/images/cardinality.png" alt="formula"><br>where constant &#x3D; 0.79402 and R[j] is the value in register j and N &#x3D; m.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HyperLoglog&quot;&gt;&lt;a href=&quot;#HyperLoglog&quot; class=&quot;headerlink&quot; title=&quot;HyperLoglog&quot;&gt;&lt;/a&gt;HyperLoglog&lt;/h2&gt;&lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Backgro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HowManyBits</title>
    <link href="http://example.com/2024/12/19/HowManyBits/"/>
    <id>http://example.com/2024/12/19/HowManyBits/</id>
    <published>2024-12-19T06:00:27.000Z</published>
    <updated>2024-12-19T06:47:19.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSAPP-howManyBits"><a href="#CSAPP-howManyBits" class="headerlink" title="CSAPP - howManyBits"></a>CSAPP - howManyBits</h2><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two&#x27;s complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> b16, b8, b4, b2, b1, b0;</span><br><span class="line">  <span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  x = (sign&amp;~x)|(~sign&amp;x);</span><br><span class="line"></span><br><span class="line">  b16 = !!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  x = x &gt;&gt; b16;</span><br><span class="line">  b8 = !!(x&gt;&gt;<span class="number">8</span>)&lt;&lt;<span class="number">3</span>;</span><br><span class="line">  x = x &gt;&gt; b8;</span><br><span class="line">  b4 = !!(x&gt;&gt;<span class="number">4</span>)&lt;&lt;<span class="number">2</span>;</span><br><span class="line">  x = x &gt;&gt; b4;</span><br><span class="line">  b2 = !!(x&gt;&gt;<span class="number">2</span>)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  x = x &gt;&gt; b2;</span><br><span class="line">  b1 = !!(x&gt;&gt;<span class="number">1</span>);</span><br><span class="line">  x = x &gt;&gt; b1;</span><br><span class="line">  b0 = x;</span><br><span class="line">  <span class="keyword">return</span> b16 + b8 + b4 + b2 + b1 + b0 + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Explaination"><a href="#3-Explaination" class="headerlink" title="3. Explaination"></a>3. Explaination</h3><h4 id="First-part-of-the-code"><a href="#First-part-of-the-code" class="headerlink" title="First part of the code"></a>First part of the code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">x = (sign&amp;~x)|(~sign&amp;x)</span><br></pre></td></tr></table></figure><p>After this operation, when x is positive, we do not change x value, when x is negative, we reverse all bits of x,</p><p>More details: when x is negative, sign is all 1,we will get ~x in (sign &amp; ~x) rather than (0000 … 000 &amp; x) which reverse all bits of x and and vice versa.</p><p>Now, the bits x have plus 1 sign bit is the result we want to get.</p><h4 id="Second-part-of-the-code"><a href="#Second-part-of-the-code" class="headerlink" title="Second part of the code"></a>Second part of the code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b16;</span><br><span class="line">b16 = !!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  x = x &gt;&gt; b16;</span><br></pre></td></tr></table></figure><p>In this segment of code, we first right left the x,which get the high 16 bits, and then judge them whether contain 1,</p><ul><li>if it does contain,represent we need low 16 bits, b16 &#x3D; 16.</li><li>if not, b16 &#x3D; 0, represents we don’t need hgih 16 bits.</li></ul><p>Then depend on b16 equals to 0 or 16 , we move bits of x.</p><ul><li>b16 &#x3D; 16, means we should focus on high 16 bits in the future</li><li>b16 &#x3D; 0, means we should drop high 16 bits and focus on low 16 bits.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSAPP-howManyBits&quot;&gt;&lt;a href=&quot;#CSAPP-howManyBits&quot; class=&quot;headerlink&quot; title=&quot;CSAPP - howManyBits&quot;&gt;&lt;/a&gt;CSAPP - howManyBits&lt;/h2&gt;&lt;h3 id=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>IsTMax</title>
    <link href="http://example.com/2024/12/17/IsMax/"/>
    <id>http://example.com/2024/12/17/IsMax/</id>
    <published>2024-12-17T07:14:03.000Z</published>
    <updated>2024-12-17T08:35:00.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSAPP-isTmax"><a href="#CSAPP-isTmax" class="headerlink" title="CSAPP isTmax"></a>CSAPP isTmax</h2><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i = x+<span class="number">1</span>;<span class="comment">//Tmin,1000...</span></span><br><span class="line">  x=x+i;<span class="comment">//-1,1111...</span></span><br><span class="line">  x=~x;<span class="comment">//0,0000...</span></span><br><span class="line">  i=!i;<span class="comment">//exclude x=0xffff...</span></span><br><span class="line">  x=x+i;<span class="comment">//exclude x=0xffff...</span></span><br><span class="line">  <span class="keyword">return</span> !x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Imitation"><a href="#3-Imitation" class="headerlink" title="3. Imitation"></a>3. Imitation</h3><h4 id="Suppose-x-is-TMax-which-is-2147483647-or-0x7FFFFFFF"><a href="#Suppose-x-is-TMax-which-is-2147483647-or-0x7FFFFFFF" class="headerlink" title="Suppose x is TMax which is 2147483647 or 0x7FFFFFFF"></a>Suppose x is TMax which is 2147483647 or 0x7FFFFFFF</h4><blockquote><p>x Binary representation: 01111111 11111111 11111111 11111111</p></blockquote><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>int i &#x3D; x + 1;</p><blockquote><p>i Binary representation: 10000000 00000000 00000000 00000000</p></blockquote><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>x &#x3D; x + i</p><blockquote><p>Binary representation x : 11111111 11111111 11111111 11111111</p></blockquote><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>x &#x3D; ~x</p><blockquote><p>Binary representation x : 00000000 00000000 00000000 00000000</p></blockquote><h4 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h4><p>i &#x3D; !i</p><p>before: i is the minimum integer<br>after: i &#x3D; 0</p><blockquote><p>Binary representation: 00000000 00000000 00000000 00000000</p></blockquote><p>This is the most scenario.</p><p>notes:</p><blockquote><p>if i &#x3D; 1, only happend when original x is -1</p></blockquote><blockquote><p>x &#x3D; -1 binary representation is : 11111111 11111111 11111111 11111111</p></blockquote><h4 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h4><p>x &#x3D; x + i</p><blockquote><p>result -&gt; x &#x3D; 0</p></blockquote><h4 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h4><p>return !x</p><blockquote><p>result true</p></blockquote><h3 id="4-Explaination"><a href="#4-Explaination" class="headerlink" title="4. Explaination"></a>4. Explaination</h3><p>Basic thoughts: Considering we need to transfer a integer value x to a boolean value,<br>we could first transfer integer value to zero , then reverse zero to non-zero which could also represent true.</p><p>The imitation gives us a true example.<br>First of all, we should know about what is the maximum, two’s complement number.<br>It is represented as 0 following 1 to the end.</p><p>So, we first add 1 to it, making the result to minimum integer value,<br>which is represented as 1 following 0 to the end.</p><p>And, then use maximum integer value add to minimum integer value which<br>can get -1 as result.</p><p>Next, do bit operation, reversing each bit 1 to 0 , which can get 0 as result.</p><p>Now, we get the result what we want.Commonly, we just need to do !x to return.</p><p>But considering a special scenario, which is x equals to -1 which binary representation is all 1.<br>when x &#x3D; -1 , x + 1 &#x3D; 0 (i), x + i still all 1 in binary representation (x),<br>~x &#x3D; 0, is the same result as the maximum integer value.</p><p>So, we need to exclude this context.<br>we could use flag i to mark it, to test i whetther equals to zero,<br>if i equals to zero, we need to exclude.<br>We use !i to add to the result which we get formerly.<br>when the input is maximum integer value , !i will be zero and will not affect the final result.<br>if the input is not , it will affect the final result to false;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSAPP-isTmax&quot;&gt;&lt;a href=&quot;#CSAPP-isTmax&quot; class=&quot;headerlink&quot; title=&quot;CSAPP isTmax&quot;&gt;&lt;/a&gt;CSAPP isTmax&lt;/h2&gt;&lt;h3 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="http://example.com/2024/12/15/react/"/>
    <id>http://example.com/2024/12/15/react/</id>
    <published>2024-12-15T06:59:38.000Z</published>
    <updated>2024-12-17T00:38:57.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-For-beginner"><a href="#React-For-beginner" class="headerlink" title="React For beginner"></a>React For beginner</h2><h3 id="1-Preparation"><a href="#1-Preparation" class="headerlink" title="1. Preparation"></a>1. Preparation</h3><ul><li>Download nodejs</li><li>Install Visual Studio Code</li></ul><h3 id="2-Use-Vite-to-create-react-project"><a href="#2-Use-Vite-to-create-react-project" class="headerlink" title="2, Use Vite to create react project"></a>2, Use Vite to create react project</h3><ul><li>find a path as your website root project.</li><li>open the terminal , write<blockquote><p>npm create vite@latest</p></blockquote></li><li>then choose what you want like<blockquote><p>project name : your react project name<br>select a framework: react or vue or etc.</p></blockquote><ul><li>select a variant like : javascript or typescript</li></ul></li></ul><h3 id="3-Install-the-dependencies-and-start-the-project"><a href="#3-Install-the-dependencies-and-start-the-project" class="headerlink" title="3. Install the dependencies and start the project"></a>3. Install the dependencies and start the project</h3><ul><li><p>npm install<br>the commmand above is to install the dependencies your project needs</p></li><li><p>npm run dev<br>the command above is to run the project which is dev environmemnt</p></li></ul><h3 id="4-Introduction-to-the-structure-of-project"><a href="#4-Introduction-to-the-structure-of-project" class="headerlink" title="4. Introduction to the structure of project"></a>4. Introduction to the structure of project</h3><ul><li>First, let focuse on the file &#x2F;src&#x2F;main.jsx.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StrictMode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.jsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>this file acts as javascript main function, it has single component which is App componet</p><ul><li>Second, let’s focus on App.jsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> reactLogo <span class="keyword">from</span> <span class="string">&#x27;./assets/react.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> viteLogo <span class="keyword">from</span> <span class="string">&#x27;/vite.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./Header&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Header</span>/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><p>this App component contains single component Header</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Header</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>About<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Services<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span>;</span><br></pre></td></tr></table></figure><p>So,at this moment, you could know about a little about the structure of react project , and how to organize the components.</p><h3 id="5-Variable-in-the-react"><a href="#5-Variable-in-the-react" class="headerlink" title="5. Variable in the react"></a>5. Variable in the react</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Footer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;copy;</span> &#123;new Date().getFullYear()&#125; Your website name<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Footer</span>;</span><br></pre></td></tr></table></figure><p>the above code is about a Footer component, and i want to show different year depending on current year, which i need to import the variable, the format of the usage of variable is to wrapper it with <strong>{}</strong> and so we could write programming code syntax in it to show the current full year</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;React-For-beginner&quot;&gt;&lt;a href=&quot;#React-For-beginner&quot; class=&quot;headerlink&quot; title=&quot;React For beginner&quot;&gt;&lt;/a&gt;React For beginner&lt;/h2&gt;&lt;h3 id=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Random</title>
    <link href="http://example.com/2024/12/04/Random/"/>
    <id>http://example.com/2024/12/04/Random/</id>
    <published>2024-12-04T13:45:06.000Z</published>
    <updated>2024-12-04T14:11:28.319Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Random-in-Cpp"><a href="#Random-in-Cpp" class="headerlink" title="Random in Cpp"></a>Random in Cpp</h3><p>When we want to get a random value in cpp. we could</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="First"><a href="#First" class="headerlink" title="First,"></a>First,</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::random_device rd;</span><br><span class="line"><span class="type">int</span> random_value = <span class="built_in">rd</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This could get a random value. However it is hardware-based and OS-provided entropy source, usually used in low-level random number generators or system events.</p><h3 id="Second"><a href="#Second" class="headerlink" title="Second,"></a>Second,</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::mt19937 s_RandomEngine</span><br></pre></td></tr></table></figure><p>This is the actually random value generator we want to use in the daily business.<br>It can generate pseudo-random numbers efficientl.<br>But remember, you need to seed it by your random_device like this</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::random_device rd;</span><br><span class="line"><span class="function">std::mt19937 <span class="title">engine</span><span class="params">(rd())</span></span>;</span><br><span class="line"><span class="type">int</span> random_value = <span class="built_in">engine</span>();</span><br></pre></td></tr></table></figure><p>The running result is as follows ⬇️<br><img src="/images/random_engine.png" alt="alt text"></p><h3 id="Third，"><a href="#Third，" class="headerlink" title="Third，"></a>Third，</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::uniform_int_distribution&lt;std::mt19937::result_type&gt; <span class="title">distribution</span><span class="params">(<span class="number">0</span>, <span class="number">100</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>This could limit the random value to a specific range, in my example is 0 to 100.<br>You need to feed it using engine which i mention above.<br>Here is an example :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Initialize a random number engine with a random seed</span></span><br><span class="line">    <span class="function">std::mt19937 <span class="title">engine</span><span class="params">(std::random_device&#123;&#125;())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define a uniform integer distribution over the range [0, 100]</span></span><br><span class="line">    <span class="function">std::uniform_int_distribution&lt;std::mt19937::result_type&gt; <span class="title">distribution</span><span class="params">(<span class="number">0</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate a random number using the distribution and engine</span></span><br><span class="line">    <span class="type">int</span> random_value = <span class="built_in">distribution</span>(engine);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Random value: &quot;</span> &lt;&lt; random_value &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great , this example you could execute by yourself. :)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Random-in-Cpp&quot;&gt;&lt;a href=&quot;#Random-in-Cpp&quot; class=&quot;headerlink&quot; title=&quot;Random in Cpp&quot;&gt;&lt;/a&gt;Random in Cpp&lt;/h3&gt;&lt;p&gt;When we want to get a rand</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="http://example.com/2024/12/01/HashMap/"/>
    <id>http://example.com/2024/12/01/HashMap/</id>
    <published>2024-12-01T05:25:53.000Z</published>
    <updated>2024-12-01T08:39:19.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="1-Initialize"><a href="#1-Initialize" class="headerlink" title="1. Initialize"></a>1. Initialize</h3><p>Today, I want to explain how HashMap in Java to initialize the threshold using bit operation.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static final int tableSizeFor(int cap) &#123;</span><br><span class="line">        int n = -1 &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - 1);</span><br><span class="line">        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>The above is the original code, we can find that the input parameter is the capacity of the HashMap, and the return value is the threshold of HashMap.</p><ul><li><p>First,<br>the (cap - 1) is the last index of HashMap array</p></li><li><p>Second,<br>Integer.numberOfLeadingZeros method could get the counts of the leading zeros in (cap - 1)<br>in front of the default bits of system(like 32-bit)</p><p>Here, i will give you an example.</p><p>For example, Integer.numberOfLeadingZeros(13).<br>13 which is 1101 –&gt; four bits in the lower bits of the 32-bit in your system.<br>0000 0000 0000 1101 which is all bits it shows in the system.<br>and the method function could return the nunber of zeros which in front of 1111,which is 32 - 4 &#x3D; 28</p></li><li><p>Third, -1 &gt;&gt;&gt; Integer.numberOfLeadingZeros(13)<br>-1 in the binary(32-bit) is 1111 1111 1111 1111<br>the sign of &gt;&gt;&gt; represents unsigned right shift operator,which fills zero in the right bits(higher bits).</p><p>So, in my example -1 &gt;&gt;&gt; 28 which gets is 0000 0000 0000 1111<br>the progress is 1111 1111 1111 1111 &#x3D;&#x3D;&#x3D;&gt; 0000 0000 0000 1111<br>the original binary code is shifted 28 bits to the right</p><p>And, the result is 15+1 &#x3D; 16, which is greater than 13 and is a power of 2.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h2&gt;&lt;h3 id=&quot;1-Initialize&quot;&gt;&lt;a href=&quot;#1-Initialize&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kubernetes</title>
    <link href="http://example.com/2024/11/20/Kubernetes/"/>
    <id>http://example.com/2024/11/20/Kubernetes/</id>
    <published>2024-11-20T11:56:36.000Z</published>
    <updated>2024-11-20T12:38:27.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kybernetes-Explained"><a href="#Kybernetes-Explained" class="headerlink" title="Kybernetes Explained"></a>Kybernetes Explained</h2><h3 id="control-plane-master-Node"><a href="#control-plane-master-Node" class="headerlink" title="control plane(master Node)"></a>control plane(master Node)</h3><h4 id="A-kbue-api-server"><a href="#A-kbue-api-server" class="headerlink" title="A. kbue-api server"></a>A. <strong>kbue-api server</strong></h4><p>expose the kubernetes api, which is used by all components to interact with the cluster</p><p>validate and process api requests ,used for AAA –&gt; authorization accounting authentication</p><h4 id="B-control-manager"><a href="#B-control-manager" class="headerlink" title="B. control manager"></a>B. <strong>control manager</strong></h4><p>node or deployment controller</p><h4 id="C-kube-scheduler"><a href="#C-kube-scheduler" class="headerlink" title="C.kube scheduler"></a>C.<strong>kube scheduler</strong></h4><p>decide which node should run depending on the resource or other factors</p><h4 id="D-Etcd-local-database"><a href="#D-Etcd-local-database" class="headerlink" title="D. Etcd(local database)"></a>D. <strong>Etcd</strong>(local database)</h4><p>a distributed key-value store that stores all cluster data, including configuration , state and metadata.</p><p>hold the entire data of the cluster</p><h3 id="node-plane"><a href="#node-plane" class="headerlink" title="node plane"></a>node plane</h3><h4 id="A-kube-let"><a href="#A-kube-let" class="headerlink" title="A. kube let"></a>A. kube let</h4><p>input : pod specifications from the control plane , either pulled via the Kubernetes API server or provided directly through local files</p><p>Execution: Works with the container runtime to pull images, create containers, and start them on the node</p><p>Monitoring: Continuously monitors the containers and nodes for health and status updates, sending this information back to the API server</p><h4 id="B-kube-proxy"><a href="#B-kube-proxy" class="headerlink" title="B. kube proxy"></a>B. kube proxy</h4><p>enable communication between nodes</p><h4 id="C-pod"><a href="#C-pod" class="headerlink" title="C. pod"></a>C. pod</h4><p>contains docker-containers</p><p><img src="/../images/Kubernetes.png" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kybernetes-Explained&quot;&gt;&lt;a href=&quot;#Kybernetes-Explained&quot; class=&quot;headerlink&quot; title=&quot;Kybernetes Explained&quot;&gt;&lt;/a&gt;Kybernetes Explained&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RegisterName</title>
    <link href="http://example.com/2024/11/04/RegisterName/"/>
    <id>http://example.com/2024/11/04/RegisterName/</id>
    <published>2024-11-04T06:00:33.000Z</published>
    <updated>2024-11-04T06:38:07.468Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to operating systems, especially for x86-64 architecture,we often encounter various types of registers, and their names can be confusing.Today, I’ll explain them in detail.</p><h2 id="Registers-in-the-x86-64-Architecture"><a href="#Registers-in-the-x86-64-Architecture" class="headerlink" title="Registers in the x86-64 Architecture"></a>Registers in the x86-64 Architecture</h2><table><thead><tr><th>Register</th><th>Full Name</th><th>Usage</th></tr></thead><tbody><tr><td>RAX</td><td>Accumulator Register</td><td>be used for arithmetic and logical operations.</td></tr><tr><td>RBX</td><td>Base Register</td><td>be used as a base pointer for memory access.</td></tr><tr><td>RCX</td><td>Counter Register</td><td>be used as a loop counter in LOOP and shift&#x2F;rotate instructions.</td></tr><tr><td>RDX</td><td>Data Register</td><td>be used in multiplication and division operations</td></tr><tr><td>RSI</td><td>Source Register</td><td>be used as a source pointer for string and memory operations</td></tr><tr><td>RDI</td><td>Destination Register</td><td>be used as the destination pointer in string operation</td></tr><tr><td>RBP</td><td>Base Pointer Register</td><td>used as a frame pointer for stack frames in function calls.</td></tr><tr><td>RSP</td><td>Stack Register</td><td>holds the address of the top of the stack</td></tr><tr><td>R9</td><td>Additional General-Purpose Register</td><td>provides extra general-purpose storage</td></tr><tr><td>…</td><td>…</td><td>…</td></tr><tr><td>R15</td><td>Additional General-Purpose Register</td><td>provides extra general-purpose storage</td></tr></tbody></table><h2 id="Register-History"><a href="#Register-History" class="headerlink" title="Register History"></a>Register History</h2><p><img src="/images/IntegerRegister.png" alt="Integer Register"></p><ul><li><strong>On a 16-bit machine</strong>, there are 16 bits (0-15) available for storage. The AL register represents the lower 8 bits (0-7), while AH represents the upper 8 bits (8-15). The AX register represents all 16 bits combined.</li><li><strong>On a 32-bit machine</strong>, registers are prefixed with E (for “Extended”) to indicate a 32-bit extension of the original 16-bit registers.</li><li><strong>On a 64-bit machine</strong>, registers are prefixed with R (for “Register”) to signify the 64-bit version of the register.</li></ul><h2 id="Summary-of-Naming"><a href="#Summary-of-Naming" class="headerlink" title="Summary of Naming"></a>Summary of Naming</h2><p>The first eight registers (RAX, RBX, RCX, RDX, RSI, RDI, RBP, and RSP) retain their original x86 names due to their historic roles in assembly programming and compatibility requirements. The names of the newer registers (R8 to R15) simply follow a numerical sequence (R8, R9, etc.), reflecting their additional, general-purpose nature without specific historical functions. These additional registers allow x86-64 to handle more data in parallel, which is essential for modern, complex applications.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When it comes to operating systems, especially for x86-64 architecture,we often encounter various types of registers, and their names can</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/11/04/hello-world/"/>
    <id>http://example.com/2024/11/04/hello-world/</id>
    <published>2024-11-04T02:03:31.445Z</published>
    <updated>2024-11-04T02:03:31.445Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
