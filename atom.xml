<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VictorHolmes Blog</title>
  
  <subtitle>Hexo Blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-08-14T06:47:48.663Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victor holmes</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>voting-dapp with anchor</title>
    <link href="http://example.com/2025/08/14/voting-dapp-with-anchor/"/>
    <id>http://example.com/2025/08/14/voting-dapp-with-anchor/</id>
    <published>2025-08-14T06:47:42.000Z</published>
    <updated>2025-08-14T06:47:48.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Building-a-Solana-Voting-DApp-with-Anchor-A-Complete-Step-by-Step-Guide"><a href="#Building-a-Solana-Voting-DApp-with-Anchor-A-Complete-Step-by-Step-Guide" class="headerlink" title="Building a Solana Voting DApp with Anchor: A Complete Step-by-Step Guide"></a>Building a Solana Voting DApp with Anchor: A Complete Step-by-Step Guide</h1><p>Building decentralized applications (dApps) on Solana has become increasingly popular due to the blockchain’s high performance and low transaction costs. In this comprehensive guide, we’ll walk through creating a complete voting dApp using the Anchor framework - from setting up your development environment to deploying and testing your smart contract.</p><h2 id="What-We’ll-Build"><a href="#What-We’ll-Build" class="headerlink" title="What We’ll Build"></a>What We’ll Build</h2><p>Our voting dApp will allow users to:</p><ul><li>Create polls with custom descriptions and time limits</li><li>Add candidates to existing polls</li><li>Cast votes for their preferred candidates</li><li>Enforce voting time windows (polls have start and end times)</li><li>Track vote counts in real-time</li></ul><h2 id="Phase-1-Environment-Setup"><a href="#Phase-1-Environment-Setup" class="headerlink" title="Phase 1: Environment Setup"></a>Phase 1: Environment Setup</h2><h3 id="Prerequisites-Installation"><a href="#Prerequisites-Installation" class="headerlink" title="Prerequisites Installation"></a>Prerequisites Installation</h3><p>First, let’s install all the necessary tools:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install Rust</span></span><br><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class="line"><span class="built_in">source</span> ~/.cargo/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Solana CLI</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -sSfL https://release.solana.com/v1.16.0/install)</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;~/.local/share/solana/install/active_release/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Node.js and Yarn</span></span><br><span class="line">npm install -g yarn</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Anchor Version Manager (AVM)</span></span><br><span class="line">cargo install --git https://github.com/coral-xyz/anchor avm --locked --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install and use latest Anchor</span></span><br><span class="line">avm install latest</span><br><span class="line">avm use latest</span><br></pre></td></tr></table></figure><h3 id="Solana-Configuration"><a href="#Solana-Configuration" class="headerlink" title="Solana Configuration"></a>Solana Configuration</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure Solana for development</span></span><br><span class="line">solana config <span class="built_in">set</span> --url devnet</span><br><span class="line">solana-keygen new  <span class="comment"># Generate a new keypair</span></span><br><span class="line">solana config get  <span class="comment"># Verify configuration</span></span><br><span class="line">solana airdrop 2   <span class="comment"># Get some SOL for testing</span></span><br></pre></td></tr></table></figure><h2 id="Phase-2-Project-Initialization"><a href="#Phase-2-Project-Initialization" class="headerlink" title="Phase 2: Project Initialization"></a>Phase 2: Project Initialization</h2><h3 id="Creating-the-Anchor-Project"><a href="#Creating-the-Anchor-Project" class="headerlink" title="Creating the Anchor Project"></a>Creating the Anchor Project</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Initialize new Anchor project</span></span><br><span class="line">anchor init voting-dapp</span><br><span class="line"><span class="built_in">cd</span> voting-dapp</span><br></pre></td></tr></table></figure><p>This creates a structured project with:</p><ul><li><code>programs/voting-dapp/src/lib.rs</code> - Our smart contract</li><li><code>tests/</code> - Test files</li><li><code>Anchor.toml</code> - Project configuration</li><li><code>target/</code> - Build artifacts</li></ul><h2 id="Phase-3-Smart-Contract-Development"><a href="#Phase-3-Smart-Contract-Development" class="headerlink" title="Phase 3: Smart Contract Development"></a>Phase 3: Smart Contract Development</h2><h3 id="Designing-the-Program-Architecture"><a href="#Designing-the-Program-Architecture" class="headerlink" title="Designing the Program Architecture"></a>Designing the Program Architecture</h3><p>Our smart contract needs three main components:</p><ol><li><strong>Data Structures</strong>: <code>Poll</code> and <code>Candidate</code> accounts</li><li><strong>Instructions</strong>: <code>initialize_poll</code>, <code>initialize_candidate</code>, <code>vote</code></li><li><strong>Error Handling</strong>: Custom errors for timing validation</li></ol><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>Here’s our complete program code in <code>programs/voting-dapp/src/lib.rs</code>:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> anchor_lang::prelude::*;</span><br><span class="line"></span><br><span class="line">declare_id!(<span class="string">&quot;6ZVQpsP3FSWP1PgKt286gtC5yJzNnEvMYo67xJWe579G&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#[program]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> voting_dapp &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">initialize_poll</span>(</span><br><span class="line">        ctx: Context&lt;InitializePoll&gt;,</span><br><span class="line">        poll_id: <span class="type">u64</span>,</span><br><span class="line">        description: <span class="type">String</span>,</span><br><span class="line">        poll_start: <span class="type">i64</span>,</span><br><span class="line">        poll_end: <span class="type">i64</span>,</span><br><span class="line">    ) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">poll</span> = &amp;<span class="keyword">mut</span> ctx.accounts.poll;</span><br><span class="line">        poll.poll_id = poll_id;</span><br><span class="line">        poll.description = description;</span><br><span class="line">        poll.poll_start = poll_start;</span><br><span class="line">        poll.poll_end = poll_end;</span><br><span class="line">        poll.candidate_amount = <span class="number">0</span>;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">initialize_candidate</span>(</span><br><span class="line">        ctx: Context&lt;InitializeCandidate&gt;,</span><br><span class="line">        candidate_name: <span class="type">String</span>,</span><br><span class="line">        _poll_id: <span class="type">u64</span>,</span><br><span class="line">    ) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">candidate</span> = &amp;<span class="keyword">mut</span> ctx.accounts.candidate;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">poll</span> = &amp;<span class="keyword">mut</span> ctx.accounts.poll;</span><br><span class="line"></span><br><span class="line">        candidate.candidate_name = candidate_name;</span><br><span class="line">        candidate.candidate_votes = <span class="number">0</span>;</span><br><span class="line">        poll.candidate_amount += <span class="number">1</span>;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">vote</span>(ctx: Context&lt;Vote&gt;, _candidate_name: <span class="type">String</span>, _poll_id: <span class="type">u64</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">candidate</span> = &amp;<span class="keyword">mut</span> ctx.accounts.candidate;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">clock</span> = Clock::<span class="title function_ invoke__">get</span>()?;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> clock.unix_timestamp &lt; ctx.accounts.poll.poll_start &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(VotingError::VotingNotStarted.<span class="title function_ invoke__">into</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> clock.unix_timestamp &gt; ctx.accounts.poll.poll_end &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(VotingError::VotingEnded.<span class="title function_ invoke__">into</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        candidate.candidate_votes += <span class="number">1</span>;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[account]</span></span><br><span class="line"><span class="meta">#[derive(InitSpace)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Poll</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> poll_id: <span class="type">u64</span>,</span><br><span class="line">    <span class="meta">#[max_len(280)]</span></span><br><span class="line">    <span class="keyword">pub</span> description: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> poll_start: <span class="type">i64</span>,</span><br><span class="line">    <span class="keyword">pub</span> poll_end: <span class="type">i64</span>,</span><br><span class="line">    <span class="keyword">pub</span> candidate_amount: <span class="type">u64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[account]</span></span><br><span class="line"><span class="meta">#[derive(InitSpace)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Candidate</span> &#123;</span><br><span class="line">    <span class="meta">#[max_len(50)]</span></span><br><span class="line">    <span class="keyword">pub</span> candidate_name: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> candidate_votes: <span class="type">u64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[error_code]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">VotingError</span> &#123;</span><br><span class="line">    <span class="meta">#[msg(<span class="string">&quot;Voting has not started yet&quot;</span>)]</span></span><br><span class="line">    VotingNotStarted,</span><br><span class="line">    <span class="meta">#[msg(<span class="string">&quot;Voting has ended&quot;</span>)]</span></span><br><span class="line">    VotingEnded,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Key-Features-Explained"><a href="#Key-Features-Explained" class="headerlink" title="Key Features Explained"></a>Key Features Explained</h3><p><strong>Program Derived Addresses (PDAs)</strong>: We use PDAs to create deterministic account addresses based on poll IDs and candidate names. This ensures each poll and candidate has a unique, predictable address.</p><p><strong>Time-based Validation</strong>: The <code>vote</code> instruction checks the current blockchain time against the poll’s start and end times, ensuring votes can only be cast during the active voting period.</p><p><strong>Account Space Calculation</strong>: Using <code>#[derive(InitSpace)]</code> automatically calculates the required space for accounts, preventing allocation errors.</p><h2 id="Phase-4-Building-and-Deployment"><a href="#Phase-4-Building-and-Deployment" class="headerlink" title="Phase 4: Building and Deployment"></a>Phase 4: Building and Deployment</h2><h3 id="Initial-Build-and-Fixes"><a href="#Initial-Build-and-Fixes" class="headerlink" title="Initial Build and Fixes"></a>Initial Build and Fixes</h3><p>Our first build attempt revealed type mismatches:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anchor build</span><br></pre></td></tr></table></figure><p><strong>Error</strong>: Clock.unix_timestamp (i64) vs poll times (u64)</p><p><strong>Solution</strong>: Changed poll_start and poll_end to i64 in both the instruction parameters and the Poll struct.</p><h3 id="Program-ID-Management"><a href="#Program-ID-Management" class="headerlink" title="Program ID Management"></a>Program ID Management</h3><p>After building, we needed to update the program ID in two places:</p><ol><li>The <code>declare_id!</code> macro in our Rust code</li><li>The <code>Anchor.toml</code> configuration file</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get the generated program ID</span></span><br><span class="line">solana address -k target/deploy/voting_dapp-keypair.json</span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Start local validator</span></span><br><span class="line">solana-test-validator</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deploy the program</span></span><br><span class="line">anchor deploy</span><br></pre></td></tr></table></figure><p><strong>Success Output</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Program Id: 6ZVQpsP3FSWP1PgKt286gtC5yJzNnEvMYo67xJWe579G</span><br><span class="line">Deploy success</span><br></pre></td></tr></table></figure><h2 id="Phase-5-Testing-and-Debugging"><a href="#Phase-5-Testing-and-Debugging" class="headerlink" title="Phase 5: Testing and Debugging"></a>Phase 5: Testing and Debugging</h2><h3 id="Initial-Testing-Challenges"><a href="#Initial-Testing-Challenges" class="headerlink" title="Initial Testing Challenges"></a>Initial Testing Challenges</h3><p>Our first test attempts revealed several issues:</p><ol><li><strong>Program ID Mismatch</strong>: Fixed by updating the declared ID to match the deployed program</li><li><strong>Account Collisions</strong>: Solved by using random poll IDs for each test run</li><li><strong>Timing Issues</strong>: Resolved by using Solana’s blockchain time instead of JavaScript timestamps</li></ol><h3 id="Final-Working-Test-Suite"><a href="#Final-Working-Test-Suite" class="headerlink" title="Final Working Test Suite"></a>Final Working Test Suite</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;voting-dapp&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> provider = anchor.<span class="property">AnchorProvider</span>.<span class="title function_">env</span>();</span><br><span class="line">  anchor.<span class="title function_">setProvider</span>(provider);</span><br><span class="line">  <span class="keyword">const</span> program = anchor.<span class="property">workspace</span>.<span class="property">VotingDapp</span> <span class="keyword">as</span> <span class="title class_">Program</span>&lt;<span class="title class_">VotingDapp</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pollId = <span class="keyword">new</span> anchor.<span class="title function_">BN</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000000</span>));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;Initialize a poll&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> slot = <span class="keyword">await</span> provider.<span class="property">connection</span>.<span class="title function_">getSlot</span>();</span><br><span class="line">    <span class="keyword">const</span> timestamp = <span class="keyword">await</span> provider.<span class="property">connection</span>.<span class="title function_">getBlockTime</span>(slot);</span><br><span class="line">    <span class="keyword">const</span> now = timestamp || <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pollStart = <span class="keyword">new</span> anchor.<span class="title function_">BN</span>(now - <span class="number">300</span>); <span class="comment">// 5 minutes ago</span></span><br><span class="line">    <span class="keyword">const</span> pollEnd = <span class="keyword">new</span> anchor.<span class="title function_">BN</span>(now + <span class="number">7200</span>); <span class="comment">// 2 hours from now</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> program.<span class="property">methods</span></span><br><span class="line">      .<span class="title function_">initializePoll</span>(pollId, <span class="string">&quot;Test Poll&quot;</span>, pollStart, pollEnd)</span><br><span class="line">      .<span class="title function_">accounts</span>(&#123;</span><br><span class="line">        <span class="attr">signer</span>: provider.<span class="property">wallet</span>.<span class="property">publicKey</span>,</span><br><span class="line">        <span class="attr">poll</span>: pollPda,</span><br><span class="line">        <span class="attr">systemProgram</span>: anchor.<span class="property">web3</span>.<span class="property">SystemProgram</span>.<span class="property">programId</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">rpc</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Additional tests for candidates and voting...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Final Test Results</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">✔ Initialize a poll (150ms)</span><br><span class="line">✔ Initialize a candidate (476ms)</span><br><span class="line">✔ Vote for a candidate (455ms)</span><br><span class="line">✔ Vote multiple times (474ms)</span><br><span class="line">✔ Initialize another candidate (473ms)</span><br><span class="line"></span><br><span class="line">5 passing (2s)</span><br></pre></td></tr></table></figure><h2 id="Key-Lessons-Learned"><a href="#Key-Lessons-Learned" class="headerlink" title="Key Lessons Learned"></a>Key Lessons Learned</h2><h3 id="1-Type-Consistency-Matters"><a href="#1-Type-Consistency-Matters" class="headerlink" title="1. Type Consistency Matters"></a>1. Type Consistency Matters</h3><p>Solana’s Clock returns i64 timestamps, so all time-related fields should use i64 for consistency.</p><h3 id="2-Program-ID-Synchronization"><a href="#2-Program-ID-Synchronization" class="headerlink" title="2. Program ID Synchronization"></a>2. Program ID Synchronization</h3><p>Always ensure your declared program ID matches the deployed program ID across all files.</p><h3 id="3-Account-Uniqueness"><a href="#3-Account-Uniqueness" class="headerlink" title="3. Account Uniqueness"></a>3. Account Uniqueness</h3><p>Use unique identifiers (like random numbers or timestamps) in tests to avoid account collision errors.</p><h3 id="4-Blockchain-vs-System-Time"><a href="#4-Blockchain-vs-System-Time" class="headerlink" title="4. Blockchain vs System Time"></a>4. Blockchain vs System Time</h3><p>When working with time-sensitive operations, always use blockchain time rather than system time for consistency.</p><h2 id="Next-Steps-Frontend-Development"><a href="#Next-Steps-Frontend-Development" class="headerlink" title="Next Steps: Frontend Development"></a>Next Steps: Frontend Development</h2><p>With our smart contract tested and deployed, the next phase involves:</p><ol><li>Setting up a React frontend with TypeScript</li><li>Integrating Solana wallet adapters</li><li>Creating user interfaces for poll creation and voting</li><li>Connecting the frontend to our deployed program</li></ol><h2 id="Technical-Architecture-Summary"><a href="#Technical-Architecture-Summary" class="headerlink" title="Technical Architecture Summary"></a>Technical Architecture Summary</h2><p>Our dApp demonstrates several important Solana development patterns:</p><ul><li><strong>Account-based Architecture</strong>: Each poll and candidate is stored in separate accounts</li><li><strong>Program Derived Addresses</strong>: Deterministic account generation</li><li><strong>Time-based Logic</strong>: Using Solana’s Clock for validation</li><li><strong>Error Handling</strong>: Custom error types for better user experience</li><li><strong>Space Optimization</strong>: Efficient account space allocation</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Building a voting dApp on Solana with Anchor showcases the power of the ecosystem for creating decentralized applications. The combination of Rust’s safety, Anchor’s developer-friendly abstractions, and Solana’s performance creates an excellent foundation for dApp development.</p><p>The journey from initial setup to working smart contract involved overcoming various challenges - from environment configuration to type mismatches and timing issues. Each obstacle provided valuable learning opportunities that deepen understanding of blockchain development.</p><p>Our voting dApp now provides a solid foundation that can be extended with features like:</p><ul><li>Multi-choice polls</li><li>Weighted voting</li><li>Anonymous voting mechanisms</li><li>Result visualization</li><li>Mobile-responsive frontend</li></ul><p>The complete source code and deployment guide demonstrate that building sophisticated dApps on Solana is accessible to developers with the right tools and approach. Whether you’re building voting systems, DAOs, or other governance applications, these patterns and techniques provide a strong starting point.</p><p><em>Ready to build your own Solana dApp? Start with the Anchor framework and let this guide be your roadmap to blockchain development success!</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Building-a-Solana-Voting-DApp-with-Anchor-A-Complete-Step-by-Step-Guide&quot;&gt;&lt;a href=&quot;#Building-a-Solana-Voting-DApp-with-Anchor-A-Compl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL Change Buffer - Boosting Write Performance</title>
    <link href="http://example.com/2025/08/07/ChangeBuffer/"/>
    <id>http://example.com/2025/08/07/ChangeBuffer/</id>
    <published>2025-08-07T06:09:07.000Z</published>
    <updated>2025-08-07T06:10:48.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-Change-Buffer-A-Deep-Dive"><a href="#MySQL-Change-Buffer-A-Deep-Dive" class="headerlink" title="MySQL Change Buffer: A Deep Dive"></a>MySQL Change Buffer: A Deep Dive</h1><h2 id="What-is-the-Change-Buffer"><a href="#What-is-the-Change-Buffer" class="headerlink" title="What is the Change Buffer?"></a>What is the Change Buffer?</h2><p>The Change Buffer is a special data structure in MySQL’s InnoDB storage engine that caches changes to secondary indexes when the affected index pages are not in the buffer pool. Instead of immediately reading the required page from disk, which would be expensive, InnoDB stores these changes in the change buffer, deferring the actual modifications until the page is loaded into memory by another operation.</p><h2 id="How-Change-Buffer-Works"><a href="#How-Change-Buffer-Works" class="headerlink" title="How Change Buffer Works"></a>How Change Buffer Works</h2><p>When you modify data that affects secondary indexes (through INSERT, UPDATE, or DELETE operations), InnoDB checks if the relevant index pages are already in the buffer pool:</p><ol><li><strong>If the page is in memory</strong>: InnoDB applies the changes directly to the index page in the buffer pool.</li><li><strong>If the page is not in memory</strong>: Instead of reading it from disk immediately, InnoDB stores the intended modification in the change buffer.</li></ol><p>Later, when the page is eventually read into the buffer pool by some other operation, the buffered changes are merged with the page in a process called “change buffer merge.”</p><h2 id="Types-of-Operations-That-Can-Be-Buffered"><a href="#Types-of-Operations-That-Can-Be-Buffered" class="headerlink" title="Types of Operations That Can Be Buffered"></a>Types of Operations That Can Be Buffered</h2><p>The change buffer can store these operations:</p><ul><li><strong>INSERT</strong>: New index entries</li><li><strong>DELETE</strong>: Marking index records for deletion</li><li><strong>UPDATE</strong>: Handled as DELETE + INSERT operations</li></ul><p>Note that only changes to secondary indexes can be buffered. Primary key changes are always processed immediately.</p><h2 id="Benefits-of-the-Change-Buffer"><a href="#Benefits-of-the-Change-Buffer" class="headerlink" title="Benefits of the Change Buffer"></a>Benefits of the Change Buffer</h2><ol><li><strong>Improved Write Performance</strong>: By avoiding immediate disk reads for secondary index updates, write operations complete faster.</li><li><strong>Reduced I&#x2F;O Operations</strong>: Multiple changes to the same index page can be merged in a single operation.</li><li><strong>Better Throughput</strong>: The system can handle more write operations per second.</li><li><strong>Batch Processing</strong>: Changes are applied in batches, which is more efficient than individual operations.</li></ol><h2 id="When-Change-Buffer-is-Most-Effective"><a href="#When-Change-Buffer-is-Most-Effective" class="headerlink" title="When Change Buffer is Most Effective"></a>When Change Buffer is Most Effective</h2><p>The change buffer provides the greatest benefit in these scenarios:</p><ul><li><strong>Random Insertions</strong>: When inserting data randomly distributed across the table</li><li><strong>Bulk Loading</strong>: When loading large amounts of data into a table with secondary indexes</li><li><strong>Low Buffer Pool Hit Ratio</strong>: When a significant portion of the working set doesn’t fit in memory</li><li><strong>Many Secondary Indexes</strong>: Tables with numerous secondary indexes benefit more</li></ul><h2 id="Configuration-Options"><a href="#Configuration-Options" class="headerlink" title="Configuration Options"></a>Configuration Options</h2><p>MySQL provides several variables to configure change buffer behavior:</p><h3 id="innodb-change-buffering"><a href="#innodb-change-buffering" class="headerlink" title="innodb_change_buffering"></a><code>innodb_change_buffering</code></h3><p>Controls which operations are buffered:</p><ul><li><code>all</code>: Buffer inserts, deletes, and purges (default)</li><li><code>none</code>: Disable change buffering</li><li><code>inserts</code>: Buffer insert operations only</li><li><code>deletes</code>: Buffer delete operations only</li><li><code>changes</code>: Buffer both inserts and deletes</li><li><code>purges</code>: Buffer physical deletion operations that happen in the background</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_change_buffering <span class="operator">=</span> <span class="string">&#x27;all&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="innodb-change-buffer-max-size"><a href="#innodb-change-buffer-max-size" class="headerlink" title="innodb_change_buffer_max_size"></a><code>innodb_change_buffer_max_size</code></h3><p>Controls the maximum size of the change buffer as a percentage of the total buffer pool size (0-50):</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_change_buffer_max_size <span class="operator">=</span> <span class="number">25</span>; <span class="comment">-- 25% of buffer pool</span></span><br></pre></td></tr></table></figure><h2 id="Monitoring-the-Change-Buffer"><a href="#Monitoring-the-Change-Buffer" class="headerlink" title="Monitoring the Change Buffer"></a>Monitoring the Change Buffer</h2><p>You can monitor change buffer activity using:</p><h3 id="Information-Schema-Tables"><a href="#Information-Schema-Tables" class="headerlink" title="Information Schema Tables"></a>Information Schema Tables</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.INNODB_METRICS</span><br><span class="line"><span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%ibuf%&#x27;</span> <span class="keyword">AND</span> STATUS<span class="operator">=</span><span class="string">&#x27;enabled&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="Performance-Schema"><a href="#Performance-Schema" class="headerlink" title="Performance Schema"></a>Performance Schema</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EVENT_NAME, COUNT_STAR, SUM_TIMER_WAIT</span><br><span class="line"><span class="keyword">FROM</span> performance_schema.events_waits_summary_global_by_event_name</span><br><span class="line"><span class="keyword">WHERE</span> EVENT_NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%ibuf%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="SHOW-ENGINE-INNODB-STATUS"><a href="#SHOW-ENGINE-INNODB-STATUS" class="headerlink" title="SHOW ENGINE INNODB STATUS"></a>SHOW ENGINE INNODB STATUS</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ENGINE INNODB STATUS;</span><br></pre></td></tr></table></figure><p>Look for the “INSERT BUFFER AND ADAPTIVE HASH INDEX” section, which provides statistics about change buffer usage.</p><h2 id="Potential-Drawbacks"><a href="#Potential-Drawbacks" class="headerlink" title="Potential Drawbacks"></a>Potential Drawbacks</h2><p>While the change buffer improves write performance, it comes with some trade-offs:</p><ol><li><strong>Delayed Consistency</strong>: Secondary indexes may not reflect the latest changes immediately.</li><li><strong>Memory Usage</strong>: The change buffer consumes part of the buffer pool.</li><li><strong>Merge Overhead</strong>: When a page is loaded, merging buffered changes adds some overhead.</li><li><strong>Recovery Time</strong>: A large change buffer may increase recovery time after a crash.</li></ol><h2 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h2><ol><li><p><strong>Size Appropriately</strong>: Set <code>innodb_change_buffer_max_size</code> based on your workload. Write-heavy applications with many secondary indexes benefit from larger settings.</p></li><li><p><strong>Monitor Buffer Efficiency</strong>: Track the change buffer hit rate and merge operations to ensure it’s providing benefits.</p></li><li><p><strong>Consider Disabling for Real-Time Applications</strong>: If your application requires immediate consistency of all indexes, you might want to disable change buffering.</p></li><li><p><strong>Periodic Merging</strong>: For write-intensive workloads with few reads, consider periodically forcing change buffer merges during low-activity periods:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_buffer_pool_dump_now <span class="operator">=</span> <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>Buffer Pool Size</strong>: Ensure your buffer pool is adequately sized. A too-small buffer pool can lead to premature eviction of pages with pending change buffer entries.</p></li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The MySQL change buffer is a powerful optimization technique that can significantly improve write performance, especially for workloads with heavy random inserts or updates to tables with multiple secondary indexes. By understanding how it works and configuring it appropriately for your workload, you can achieve better database performance without sacrificing data integrity.</p><p>Remember that the change buffer is most effective when your working set doesn’t fit entirely in memory. If your entire dataset fits in the buffer pool, the change buffer provides little benefit as most index pages will already be in memory.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL-Change-Buffer-A-Deep-Dive&quot;&gt;&lt;a href=&quot;#MySQL-Change-Buffer-A-Deep-Dive&quot; class=&quot;headerlink&quot; title=&quot;MySQL Change Buffer: A Deep Di</summary>
      
    
    
    
    <category term="Database" scheme="http://example.com/categories/Database/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="Database" scheme="http://example.com/tags/Database/"/>
    
    <category term="Performance" scheme="http://example.com/tags/Performance/"/>
    
    <category term="InnoDB" scheme="http://example.com/tags/InnoDB/"/>
    
  </entry>
  
  <entry>
    <title>BusTub Project 1 - Buffer Pool Manager Implementation</title>
    <link href="http://example.com/2025/07/05/bustub-Project-1-buffer/"/>
    <id>http://example.com/2025/07/05/bustub-Project-1-buffer/</id>
    <published>2025-07-05T06:37:55.000Z</published>
    <updated>2025-08-07T06:18:38.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Buffer-Pool-Management-in-Database-Systems"><a href="#Buffer-Pool-Management-in-Database-Systems" class="headerlink" title="Buffer Pool Management in Database Systems"></a>Buffer Pool Management in Database Systems</h1><p>Database systems need efficient memory management to balance performance and resource constraints. In this post, I’ll explore the implementation of a buffer pool manager in the BusTub database system, focusing on the LRU replacement policy.</p><h2 id="LRU-Replacement-Algorithm"><a href="#LRU-Replacement-Algorithm" class="headerlink" title="LRU Replacement Algorithm"></a>LRU Replacement Algorithm</h2><p><img src="/2025/07/05/bustub-Project-1-buffer/replacement.png" alt="LRU Replacement Visualization"></p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>The Least Recently Used (LRU) cache is a replacement policy widely used in computing to manage data storage in memory. When the cache reaches capacity and new data needs to be stored, the system must decide which existing data to evict. This is where the LRU algorithm provides an efficient solution.</p><h3 id="How-LRU-Works"><a href="#How-LRU-Works" class="headerlink" title="How LRU Works"></a>How LRU Works</h3><p>LRU operates on a simple principle: data items that haven’t been accessed recently are less likely to be needed in the near future. Therefore, when the cache is full and a new item must be added, the LRU algorithm removes the item that has remained unused for the longest period.</p><h3 id="Implementation-Approach"><a href="#Implementation-Approach" class="headerlink" title="Implementation Approach"></a>Implementation Approach</h3><p>To implement an effective LRU policy, the cache must track the access order of all items. This tracking can be accomplished using various data structures:</p><ol><li><strong>Doubly-linked list</strong>: Maintains items in order of access, with recently used items moved to the front</li><li><strong>Hash map</strong>: Provides O(1) lookups to list nodes for quick access and updates</li><li><strong>Combined approach</strong>: Uses both structures for optimal performance</li></ol><h2 id="Buffer-Pool-Manager-Implementation"><a href="#Buffer-Pool-Manager-Implementation" class="headerlink" title="Buffer Pool Manager Implementation"></a>Buffer Pool Manager Implementation</h2><p>The buffer pool manager is responsible for:</p><ol><li>Fetching pages from disk into memory</li><li>Pinning&#x2F;unpinning pages (tracking usage)</li><li>Flushing dirty pages back to disk</li><li>Implementing the replacement policy (LRU in our case)</li></ol><h3 id="Key-Components"><a href="#Key-Components" class="headerlink" title="Key Components"></a>Key Components</h3><ul><li><strong>Frame</strong>: A slot in memory that holds a page</li><li><strong>Page table</strong>: Maps page IDs to frame IDs</li><li><strong>Free list</strong>: Tracks available frames</li><li><strong>LRU replacer</strong>: Implements the replacement policy</li></ul><h3 id="Thread-Safety-Considerations"><a href="#Thread-Safety-Considerations" class="headerlink" title="Thread Safety Considerations"></a>Thread Safety Considerations</h3><p>When implementing the buffer pool manager, thread safety is critical. The <code>std::scoped_lock</code> provides an elegant solution for managing multiple mutexes:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::scoped_lock <span class="title">lock</span><span class="params">(latch_)</span></span>;  <span class="comment">// Automatically unlocks when going out of scope</span></span><br></pre></td></tr></table></figure><p>This RAII-style locking ensures that resources are properly released even if exceptions occur, preventing deadlocks and race conditions in concurrent environments.</p><h2 id="Performance-Considerations"><a href="#Performance-Considerations" class="headerlink" title="Performance Considerations"></a>Performance Considerations</h2><p>An efficient buffer pool implementation balances several factors:</p><ol><li><strong>Hit ratio</strong>: Maximizing the chance that requested pages are already in memory</li><li><strong>Eviction efficiency</strong>: Minimizing the cost of determining which pages to evict</li><li><strong>Concurrency</strong>: Supporting multiple threads without excessive locking overhead</li><li><strong>Memory overhead</strong>: Minimizing the memory used by metadata structures</li></ol><p>In the next post, I’ll dive deeper into the specific implementation details of the buffer pool manager and show benchmark results comparing different replacement policies.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Buffer-Pool-Management-in-Database-Systems&quot;&gt;&lt;a href=&quot;#Buffer-Pool-Management-in-Database-Systems&quot; class=&quot;headerlink&quot; title=&quot;Buffer P</summary>
      
    
    
    
    <category term="Database Systems" scheme="http://example.com/categories/Database-Systems/"/>
    
    
    <category term="Database" scheme="http://example.com/tags/Database/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="Buffer Management" scheme="http://example.com/tags/Buffer-Management/"/>
    
    <category term="BusTub" scheme="http://example.com/tags/BusTub/"/>
    
  </entry>
  
  <entry>
    <title>bustub</title>
    <link href="http://example.com/2025/06/29/bustub/"/>
    <id>http://example.com/2025/06/29/bustub/</id>
    <published>2025-06-29T06:06:55.000Z</published>
    <updated>2025-07-05T06:38:14.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Project-0-Primer"><a href="#Project-0-Primer" class="headerlink" title="Project 0 Primer"></a>Project 0 Primer</h1><h2 id="C-basic"><a href="#C-basic" class="headerlink" title="C++ basic"></a>C++ basic</h2><h3 id="std-string-vs-std-string-view"><a href="#std-string-vs-std-string-view" class="headerlink" title="std::string vs std::string_view"></a><em>std::string vs std::string_view</em></h3><p><strong>std::string</strong><br>keys of features</p><ul><li>dynamic memory allocation</li><li>mutable operation</li><li>wide range of member functions</li></ul><p><strong>std::string_view</strong><br>keys of features</p><ul><li>non-owing view : provide view or reference to an existing string</li><li>light weight and efficient : assign or copy string_view is fast cause it only need to consider the reference ,length and start position of the string</li><li>immutable operations : if someone just need to read the string ,should use the std::string_view</li></ul><h3 id="std-lock-guard-and-std-mutex"><a href="#std-lock-guard-and-std-mutex" class="headerlink" title="std::lock_guard and std::mutex"></a><em>std::lock_guard and std::mutex</em></h3><p><strong>std::mutex</strong><br>A std::mutex (short for “mutual exclusion”) is a synchronization primitive used to protect shared data from being accessed concurrently by multiple threads.<br>std::mutex example</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMessage</span><span class="params">(<span class="type">const</span> std::string&amp; msg)</span> </span>&#123;</span><br><span class="line">    mtx.<span class="built_in">lock</span>();  <span class="comment">// Lock the mutex</span></span><br><span class="line">    std::cout &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class="line">    mtx.<span class="built_in">unlock</span>();  <span class="comment">// Unlock the mutex</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(printMessage, <span class="string">&quot;Hello from thread 1&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(printMessage, <span class="string">&quot;Hello from thread 2&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>std::lock_guard</strong><br>std::lock_guard is a RAII-style (Resource Acquisition Is Initialization) wrapper for std::mutex. It automatically locks the mutex when it’s constructed and unlocks it when it goes out of scope.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMessage</span><span class="params">(<span class="type">const</span> std::string&amp; msg)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(mtx)</span></span>;  <span class="comment">// Mutex is locked here</span></span><br><span class="line">    std::cout &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// Mutex will automatically be unlocked when guard goes out of scope</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(printMessage, <span class="string">&quot;Hello from thread 1&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(printMessage, <span class="string">&quot;Hello from thread 2&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Generate-executable-program"><a href="#Generate-executable-program" class="headerlink" title="Generate executable program"></a>Generate executable program</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># First, git clone the project from the github or you could fork this to your own repository and then pull the project</span></span><br><span class="line">$ git <span class="built_in">clone</span> --bare https://github.com/cmu-db/bustub.git bustub-public</span><br><span class="line"></span><br><span class="line"><span class="comment"># Second, go to the directory of the repository,the name if not fixed if you pull your own project</span></span><br><span class="line">$ <span class="built_in">cd</span> bustub-public</span><br><span class="line"></span><br><span class="line"><span class="comment"># Third, build the project</span></span><br><span class="line">$ <span class="built_in">mkdir</span> build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>when on the third step,you could meet some problem which i met in my mac computer which is located at the third_party directory under the project root path.The detail is that the minimum version of the makefile should be 3.5 rather than 3.0. This problem only occur in my mac,but when it build in the linux, it disappear.</p><p><img src="/2025/06/29/bustub/buildProblem.png" alt="build-problem"></p><h2 id="Primer-level"><a href="#Primer-level" class="headerlink" title="Primer level"></a>Primer level</h2><p>This conclude the basic structure of the project which contains Trie ,SkipList, Hyperloglog, ORSet</p><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><p>Tries — or prefix trees — are useful for sequential word search. Common features like autocomplete or spell-checking are more efficient when implemented with a prefix tree.</p><p>Here’s the structure of Tries:<br><img src="/2025/06/29/bustub/trie-example.png" alt="trie-structure"></p><p>Trie Implementation</p><h4 id="Core-Trie-Immutable"><a href="#Core-Trie-Immutable" class="headerlink" title="Core Trie (Immutable)"></a>Core Trie (Immutable)</h4><p>The path is as following:<br><img src="/2025/06/29/bustub/trie_path.png" alt="trie source path"></p><ul><li>Get(key) → Find value by key</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">Trie::Get</span><span class="params">(std::string_view key)</span> <span class="type">const</span> -&gt; <span class="type">const</span> T * </span>&#123;</span><br><span class="line">  <span class="comment">// Start from root</span></span><br><span class="line">  <span class="keyword">auto</span> current_node = root_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Walk through the trie following the key characters</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">char</span> c : key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current_node == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it = current_node-&gt;children_.<span class="built_in">find</span>(c);</span><br><span class="line">    <span class="keyword">if</span> (it == current_node-&gt;children_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    current_node = it-&gt;second;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if we found a node and if it has a value</span></span><br><span class="line">  <span class="keyword">if</span> (current_node == <span class="literal">nullptr</span> || !current_node-&gt;is_value_node_) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Try to cast to the expected type</span></span><br><span class="line">  <span class="keyword">auto</span> node_with_value = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;T&gt;*&gt;(current_node.<span class="built_in">get</span>());</span><br><span class="line">  <span class="keyword">if</span> (node_with_value == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;  <span class="comment">// Type mismatch</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> node_with_value-&gt;value_.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Put(key, value) → Insert&#x2F;update (creates new trie)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">Trie::Put</span><span class="params">(std::string_view key, T value)</span> <span class="type">const</span> -&gt; Trie </span>&#123;</span><br><span class="line">  <span class="comment">// Note that `T` might be a non-copyable type. Always use `std::move` when creating `shared_ptr` on that value.</span></span><br><span class="line"><span class="comment">//  throw NotImplementedException(&quot;Trie::Put is not implemented.&quot;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// You should walk through the trie and create new nodes if necessary. If the node corresponding to the key already</span></span><br><span class="line">  <span class="comment">// exists, you should create a new `TrieNodeWithValue`.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> value_ptr = std::<span class="built_in">make_shared</span>&lt;T&gt;(std::<span class="built_in">move</span>(value));</span><br><span class="line">  std::function&lt;std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;(std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;, std::string_view)&gt; put_recursive =</span><br><span class="line">      [&amp;](std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; current_node, std::string_view remaining_key) -&gt; std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; &#123;</span><br><span class="line">    <span class="comment">// Base case: we&#x27;ve consumed all characters in the key</span></span><br><span class="line">    <span class="keyword">if</span>(remaining_key.<span class="built_in">empty</span>())&#123;</span><br><span class="line">      <span class="keyword">if</span>(current_node == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="comment">// create a new TrieNode with no children</span></span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;T&gt;&gt;(value_ptr);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// create a new TrieNodeWithValue with existing children but new/updated value</span></span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;T&gt;&gt;(current_node-&gt;children_, value_ptr);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursive case: consume one character and recurse</span></span><br><span class="line">    <span class="type">char</span> next_char = remaining_key[<span class="number">0</span>];</span><br><span class="line">    std::string_view rest_key = remaining_key.<span class="built_in">substr</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// Get current children (or empty map if no current node)</span></span><br><span class="line">    std::map&lt;<span class="type">char</span>, std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;&gt; new_children;</span><br><span class="line">    <span class="keyword">if</span>(current_node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      new_children = current_node-&gt;children_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find the child for the next character</span></span><br><span class="line">    <span class="keyword">auto</span> child_it = new_children.<span class="built_in">find</span>(next_char); <span class="comment">// when meeting the crossroad,choose corresponding child</span></span><br><span class="line">    std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; child_node = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(child_it != new_children.<span class="built_in">end</span>()) &#123;</span><br><span class="line">      child_node = child_it-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// recursively process the child</span></span><br><span class="line">    new_children[next_char] = <span class="built_in">put_recursive</span>(child_node, rest_key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// return the path node here</span></span><br><span class="line">    <span class="comment">// Create a new node with the updated children</span></span><br><span class="line">    <span class="keyword">if</span> (current_node == <span class="literal">nullptr</span> || !current_node-&gt;is_value_node_) &#123;</span><br><span class="line">      <span class="comment">// No current node or current node has no value -&gt; create regular TrieNode</span></span><br><span class="line">      <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(std::<span class="built_in">move</span>(new_children));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Current node has a value -&gt; we need to preserve it while updating children</span></span><br><span class="line">      <span class="comment">// We&#x27;ll try to cast to the known instantiated types and preserve the value</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Try uint32_t</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_uint32 = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint32_t</span>&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint32_t</span>&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_uint32-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try uint64_t</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_uint64 = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint64_t</span>&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint64_t</span>&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_uint64-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try std::string</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_string = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;std::string&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;std::string&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_string-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try std::unique_ptr&lt;uint32_t&gt;</span></span><br><span class="line">      <span class="keyword">using</span> Integer = std::unique_ptr&lt;<span class="type">uint32_t</span>&gt;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_int_ptr = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;Integer&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;Integer&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_int_ptr-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try MoveBlocked</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_move_blocked = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;MoveBlocked&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;MoveBlocked&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_move_blocked-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If none of the known types match, create a regular TrieNode (losing the value)</span></span><br><span class="line">      <span class="comment">// This shouldn&#x27;t happen with the current explicit instantiations</span></span><br><span class="line">      <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(std::<span class="built_in">move</span>(new_children));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li>Remove(key) → Delete key (creates new trie)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">Trie::Remove</span><span class="params">(std::string_view key)</span> <span class="type">const</span> -&gt; Trie </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (root_ == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;  <span class="comment">// Empty trie, nothing to remove</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::function&lt;std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;(std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;, std::string_view)&gt; remove_recursive =</span><br><span class="line">      [&amp;](std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; current_node, std::string_view remaining_key) -&gt; std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If current node is null, key doesn&#x27;t exist</span></span><br><span class="line">    <span class="keyword">if</span> (current_node == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Base case: we&#x27;ve consumed all characters in the key</span></span><br><span class="line">    <span class="keyword">if</span> (remaining_key.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">      <span class="comment">// This is the node we want to remove the value from</span></span><br><span class="line">      <span class="keyword">if</span> (!current_node-&gt;is_value_node_) &#123;</span><br><span class="line">        <span class="comment">// Key doesn&#x27;t exist (no value at this node)</span></span><br><span class="line">        <span class="keyword">return</span> current_node;  <span class="comment">// Return unchanged</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Remove the value by converting to regular TrieNode</span></span><br><span class="line">      <span class="keyword">if</span> (current_node-&gt;children_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">// No children, remove this node entirely</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Has children, keep as regular TrieNode without value</span></span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(current_node-&gt;children_);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursive case: consume one character and recurse</span></span><br><span class="line">    <span class="type">char</span> next_char = remaining_key[<span class="number">0</span>];</span><br><span class="line">    std::string_view rest_key = remaining_key.<span class="built_in">substr</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the child for the next character</span></span><br><span class="line">    <span class="keyword">auto</span> child_it = current_node-&gt;children_.<span class="built_in">find</span>(next_char);</span><br><span class="line">    <span class="keyword">if</span> (child_it == current_node-&gt;children_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">      <span class="comment">// Key doesn&#x27;t exist</span></span><br><span class="line">      <span class="keyword">return</span> current_node;  <span class="comment">// Return unchanged</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursively process the child</span></span><br><span class="line">    <span class="keyword">auto</span> new_child = <span class="built_in">remove_recursive</span>(child_it-&gt;second, rest_key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create new children map</span></span><br><span class="line">    std::map&lt;<span class="type">char</span>, std::shared_ptr&lt;<span class="type">const</span> TrieNode&gt;&gt; new_children = current_node-&gt;children_;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (new_child == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="comment">// Child was removed, remove it from children map</span></span><br><span class="line">      new_children.<span class="built_in">erase</span>(next_char);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Update the child</span></span><br><span class="line">      new_children[next_char] = new_child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decide what to return based on current node&#x27;s state</span></span><br><span class="line">    <span class="keyword">if</span> (current_node-&gt;is_value_node_) &#123;</span><br><span class="line">      <span class="comment">// Current node has a value, preserve it with updated children</span></span><br><span class="line">      <span class="comment">// Try to cast to the known instantiated types and preserve the value</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Try uint32_t</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_uint32 = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint32_t</span>&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint32_t</span>&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_uint32-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try uint64_t</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_uint64 = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint64_t</span>&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;<span class="type">uint64_t</span>&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_uint64-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try std::string</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_string = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;std::string&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;std::string&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_string-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try std::unique_ptr&lt;uint32_t&gt;</span></span><br><span class="line">      <span class="keyword">using</span> Integer = std::unique_ptr&lt;<span class="type">uint32_t</span>&gt;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_int_ptr = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;Integer&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;Integer&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_int_ptr-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try MoveBlocked</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> node_with_move_blocked = <span class="keyword">dynamic_cast</span>&lt;<span class="type">const</span> TrieNodeWithValue&lt;MoveBlocked&gt;*&gt;(current_node.<span class="built_in">get</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> std::make_shared&lt;<span class="type">const</span> TrieNodeWithValue&lt;MoveBlocked&gt;&gt;(std::<span class="built_in">move</span>(new_children), node_with_move_blocked-&gt;value_);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Fallback - create regular TrieNode (shouldn&#x27;t happen with explicit instantiations)</span></span><br><span class="line">      <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(std::<span class="built_in">move</span>(new_children));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Current node has no value</span></span><br><span class="line">      <span class="keyword">if</span> (new_children.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">// No value and no children, remove this node</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No value but has children, keep as regular TrieNode</span></span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;<span class="type">const</span> TrieNode&gt;(std::<span class="built_in">move</span>(new_children));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> new_root = <span class="built_in">remove_recursive</span>(root_, key);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Trie</span>(new_root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TrieStore-Thread-Safe-Wrapper"><a href="#TrieStore-Thread-Safe-Wrapper" class="headerlink" title="TrieStore (Thread-Safe Wrapper)"></a>TrieStore (Thread-Safe Wrapper)</h4><p>Get(key) → Thread-safe read with ValueGuard</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">TrieStore::Get</span><span class="params">(std::string_view key)</span> -&gt; std::optional&lt;ValueGuard&lt;T&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// Pseudo-code:</span></span><br><span class="line">  <span class="comment">// (1) Take the root lock, get the root, and release the root lock. Don&#x27;t lookup the value in the</span></span><br><span class="line">  <span class="comment">//     trie while holding the root lock.</span></span><br><span class="line">  Trie root_snapshot;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(root_lock_)</span></span>;</span><br><span class="line">    root_snapshot = root_;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// (2) Lookup the value in the trie.</span></span><br><span class="line">  <span class="type">const</span> T* value_ptr = root_snapshot.<span class="built_in">Get</span>&lt;T&gt;(key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (3) If the value is found, return a ValueGuard object that holds a reference to the value and the</span></span><br><span class="line">  <span class="comment">//     root. Otherwise, return std::nullopt.</span></span><br><span class="line">  <span class="keyword">if</span>(value_ptr == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="literal">nullopt</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">ValueGuard</span>&lt;T&gt;(std::<span class="built_in">move</span>(root_snapshot), *value_ptr);</span><br><span class="line"><span class="comment">//  throw NotImplementedException(&quot;TrieStore::Get is not implemented.&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Put(key, value) → Thread-safe write</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrieStore::Put</span><span class="params">(std::string_view key, T value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// You will need to ensure there is only one writer at a time. Think of how you can achieve this.</span></span><br><span class="line">  <span class="comment">// The logic should be somehow similar to `TrieStore::Get`.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Acquire the write lock to ensure only one writer at a time</span></span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">write_guard</span><span class="params">(write_lock_)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the current root</span></span><br><span class="line">  Trie current_root;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">root_guard</span><span class="params">(root_lock_)</span></span>;</span><br><span class="line">    current_root = root_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create new trie with the inserted value</span></span><br><span class="line">  Trie new_root = current_root.<span class="built_in">Put</span>&lt;T&gt;(key, std::<span class="built_in">move</span>(value));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update the root</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">root_guard</span><span class="params">(root_lock_)</span></span>;</span><br><span class="line">    root_ = std::<span class="built_in">move</span>(new_root);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//  throw NotImplementedException(&quot;TrieStore::Put is not implemented.&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Remove(key) → Thread-safe delete</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TrieStore::Remove</span><span class="params">(std::string_view key)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// You will need to ensure there is only one writer at a time. Think of how you can achieve this.</span></span><br><span class="line">  <span class="comment">// The logic should be somehow similar to `TrieStore::Get`.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Acquire write lock to ensure only one writer at a time</span></span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">write_guard</span><span class="params">(write_lock_)</span></span>;  <span class="comment">// to wait</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the current root</span></span><br><span class="line">  Trie current_root;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">root_guard</span><span class="params">(root_lock_)</span></span>; <span class="comment">// to wait</span></span><br><span class="line">    current_root = root_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create new trie with the key removed</span></span><br><span class="line">  Trie new_root = current_root.<span class="built_in">Remove</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update the root</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">root_guard</span><span class="params">(root_lock_)</span></span>; <span class="comment">// to wait</span></span><br><span class="line">    root_ = std::<span class="built_in">move</span>(new_root);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//  throw NotImplementedException(&quot;TrieStore::Remove is not implemented.&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><p>The current path is located at the root of the project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">make trie_store_test trie_store_noncopy_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test basic functionality</span></span><br><span class="line">./test/trie_store_test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Test with non-copyable types</span></span><br><span class="line">./test/trie_store_noncopy_test</span><br></pre></td></tr></table></figure><h3 id="SkipList"><a href="#SkipList" class="headerlink" title="SkipList"></a>SkipList</h3><p>published by Communications of the ACM – William Pugh 1990<br>SkipList is an alternative structure to AVL tree which is simple to realize and efficient.</p><p>Here is a picture which show the process to explain the skiplist<br><img src="/2025/06/29/bustub/skiplist_process.png" alt="skip list process"><br>Explain: the purpose of this process is to query 19<br>The left side has three level, and we start from the top level 2,first we reach to 9 and 9 &lt; 19, continue,<br>then we reach to 21 and 21 &gt; 19, we get to the predecessor which is 9.<br>So far, we need to go to the deeper level which is level 1,and then we reach 17, and 17 &lt; 19, continue,then reach to 21, and 21 &gt; 19, we go to its predecessor 17.<br>Now, we need to go to the deeper level which is level 0,and then we reach to 19, which is the target.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Project-0-Primer&quot;&gt;&lt;a href=&quot;#Project-0-Primer&quot; class=&quot;headerlink&quot; title=&quot;Project 0 Primer&quot;&gt;&lt;/a&gt;Project 0 Primer&lt;/h1&gt;&lt;h2 id=&quot;C-basic&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Understanding Java Proxy Patterns - JDK Dynamic Proxy vs CGLIB</title>
    <link href="http://example.com/2025/06/16/CGLIB/"/>
    <id>http://example.com/2025/06/16/CGLIB/</id>
    <published>2025-06-16T06:32:40.000Z</published>
    <updated>2025-08-07T06:25:45.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Proxy-Patterns-JDK-Dynamic-Proxy-vs-CGLIB"><a href="#Java-Proxy-Patterns-JDK-Dynamic-Proxy-vs-CGLIB" class="headerlink" title="Java Proxy Patterns: JDK Dynamic Proxy vs CGLIB"></a>Java Proxy Patterns: JDK Dynamic Proxy vs CGLIB</h1><h2 id="Introduction-to-Proxy-Patterns"><a href="#Introduction-to-Proxy-Patterns" class="headerlink" title="Introduction to Proxy Patterns"></a>Introduction to Proxy Patterns</h2><p>In modern Java applications, especially those built with Spring Framework, proxy patterns play a crucial role in implementing cross-cutting concerns such as:</p><ul><li>Logging and monitoring</li><li>Transaction management</li><li>Security and authentication</li><li>Caching</li><li>Method execution timing</li></ul><p>These concerns often need to be applied across multiple components without modifying their source code. Proxy patterns provide an elegant solution by intercepting method calls and adding behavior before, after, or around the original method execution.</p><p>Java offers two primary approaches to creating proxies at runtime:</p><ol><li>JDK Dynamic Proxy (built into the Java standard library)</li><li>CGLIB (Code Generation Library, a third-party solution)</li></ol><p>This article explores both approaches, highlighting their differences, use cases, and implementation details.</p><h2 id="JDK-Dynamic-Proxy"><a href="#JDK-Dynamic-Proxy" class="headerlink" title="JDK Dynamic Proxy"></a>JDK Dynamic Proxy</h2><p>JDK Dynamic Proxy is Java’s built-in mechanism for creating proxy objects at runtime. It’s part of the core Java reflection API and doesn’t require any additional dependencies.</p><h3 id="Key-Characteristics"><a href="#Key-Characteristics" class="headerlink" title="Key Characteristics"></a>Key Characteristics</h3><ul><li><strong>Interface-based</strong>: Only works with interfaces; the target class must implement at least one interface</li><li><strong>Reflection-based</strong>: Uses Java’s reflection API to intercept method calls</li><li><strong>Standard library</strong>: Included in the JDK, no external dependencies required</li><li><strong>Performance</strong>: Generally fast, but slightly slower than direct method calls</li></ul><h3 id="How-JDK-Dynamic-Proxy-Works"><a href="#How-JDK-Dynamic-Proxy-Works" class="headerlink" title="How JDK Dynamic Proxy Works"></a>How JDK Dynamic Proxy Works</h3><ol><li>You define an <code>InvocationHandler</code> implementation that contains the proxy behavior</li><li>The JDK creates a proxy class that implements all interfaces of the target class</li><li>Method calls on the proxy are intercepted and delegated to the <code>InvocationHandler</code></li><li>The handler can execute custom logic before&#x2F;after invoking the original method</li></ol><h3 id="Implementation-Example"><a href="#Implementation-Example" class="headerlink" title="Implementation Example"></a>Implementation Example</h3><h4 id="1-Define-an-Interface"><a href="#1-Define-an-Interface" class="headerlink" title="1. Define an Interface"></a>1. Define an Interface</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(String username)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Implement-the-Interface"><a href="#2-Implement-the-Interface" class="headerlink" title="2. Implement the Interface"></a>2. Implement the Interface</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding user: &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Deleting user: &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Create-an-InvocationHandler"><a href="#3-Create-an-InvocationHandler" class="headerlink" title="3. Create an InvocationHandler"></a>3. Create an InvocationHandler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoggingHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is being called with arguments: &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);  <span class="comment">// Delegates to actual method</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; execution finished.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Create-and-Use-the-Proxy"><a href="#4-Create-and-Use-the-Proxy" class="headerlink" title="4. Create and Use the Proxy"></a>4. Create and Use the Proxy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Create the original object</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a proxy for the UserService interface</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance(</span><br><span class="line">                userService.getClass().getClassLoader(),</span><br><span class="line">                userService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(userService)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call methods on the proxy</span></span><br><span class="line">        proxy.addUser(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">        proxy.deleteUser(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Method addUser is being called with arguments: John Doe</span><br><span class="line">Adding user: John Doe</span><br><span class="line">Method addUser execution finished.</span><br><span class="line">Method deleteUser is being called with arguments: John Doe</span><br><span class="line">Deleting user: John Doe</span><br><span class="line">Method deleteUser execution finished.</span><br></pre></td></tr></table></figure><h2 id="CGLIB-Proxy"><a href="#CGLIB-Proxy" class="headerlink" title="CGLIB Proxy"></a>CGLIB Proxy</h2><p>CGLIB (Code Generation Library) is a powerful, high-performance code generation library that extends Java’s proxy capabilities beyond interfaces. It’s widely used in frameworks like Spring and Hibernate.</p><h3 id="Key-Characteristics-1"><a href="#Key-Characteristics-1" class="headerlink" title="Key Characteristics"></a>Key Characteristics</h3><ul><li><strong>Class-based</strong>: Works with concrete classes; no interface required</li><li><strong>Bytecode generation</strong>: Generates bytecode at runtime to create subclasses</li><li><strong>External dependency</strong>: Requires the CGLIB library</li><li><strong>Performance</strong>: Generally fast, comparable to JDK proxies</li><li><strong>Limitations</strong>: Cannot proxy final classes or methods</li></ul><h3 id="How-CGLIB-Works"><a href="#How-CGLIB-Works" class="headerlink" title="How CGLIB Works"></a>How CGLIB Works</h3><ol><li>CGLIB creates a subclass of the target class at runtime</li><li>The generated subclass overrides non-final methods of the target class</li><li>Method calls on the proxy are intercepted by a <code>MethodInterceptor</code></li><li>The interceptor can execute custom logic before&#x2F;after invoking the original method</li></ol><h3 id="Implementation-Example-1"><a href="#Implementation-Example-1" class="headerlink" title="Implementation Example"></a>Implementation Example</h3><h4 id="1-Add-CGLIB-Dependency"><a href="#1-Add-CGLIB-Dependency" class="headerlink" title="1. Add CGLIB Dependency"></a>1. Add CGLIB Dependency</h4><p>If using Maven:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-Create-a-Target-Class-No-Interface-Required"><a href="#2-Create-a-Target-Class-No-Interface-Required" class="headerlink" title="2. Create a Target Class (No Interface Required)"></a>2. Create a Target Class (No Interface Required)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding user: &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Deleting user: &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Create-and-Use-the-CGLIB-Proxy"><a href="#3-Create-and-Use-the-CGLIB-Proxy" class="headerlink" title="3. Create and Use the CGLIB Proxy"></a>3. Create and Use the CGLIB Proxy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Create CGLIB proxy for UserServiceImpl</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(UserServiceImpl.class);</span><br><span class="line">        enhancer.setCallback((MethodInterceptor) (proxy, method, args1, methodProxy) -&gt; &#123;</span><br><span class="line">            <span class="comment">// Pre-method logic: Logging</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is being called with arguments: &quot;</span> + args1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Call the original method on the target class</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodProxy.invokeSuper(proxy, args1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Post-method logic: Logging</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; execution finished.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the proxy instance</span></span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserServiceImpl) enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call methods on the proxy</span></span><br><span class="line">        proxy.addUser(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">        proxy.deleteUser(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Method addUser is being called with arguments: John Doe</span><br><span class="line">Adding user: John Doe</span><br><span class="line">Method addUser execution finished.</span><br><span class="line">Method deleteUser is being called with arguments: John Doe</span><br><span class="line">Deleting user: John Doe</span><br><span class="line">Method deleteUser execution finished.</span><br></pre></td></tr></table></figure><h2 id="Comparing-JDK-Dynamic-Proxy-and-CGLIB"><a href="#Comparing-JDK-Dynamic-Proxy-and-CGLIB" class="headerlink" title="Comparing JDK Dynamic Proxy and CGLIB"></a>Comparing JDK Dynamic Proxy and CGLIB</h2><table><thead><tr><th>Feature</th><th>JDK Dynamic Proxy</th><th>CGLIB</th></tr></thead><tbody><tr><td>Target requirements</td><td>Must implement interface(s)</td><td>Can be any non-final class</td></tr><tr><td>Method requirements</td><td>Any method declared in interface</td><td>Any non-final method</td></tr><tr><td>Dependencies</td><td>None (part of JDK)</td><td>External CGLIB library</td></tr><tr><td>Performance</td><td>Good</td><td>Good, sometimes better</td></tr><tr><td>Memory usage</td><td>Lower</td><td>Higher (generates classes)</td></tr><tr><td>Proxy creation time</td><td>Faster</td><td>Slower (class generation)</td></tr><tr><td>Spring usage</td><td>Default for interface-based beans</td><td>Used for concrete classes</td></tr></tbody></table><h2 id="When-to-Use-Each-Approach"><a href="#When-to-Use-Each-Approach" class="headerlink" title="When to Use Each Approach"></a>When to Use Each Approach</h2><h3 id="Use-JDK-Dynamic-Proxy-When"><a href="#Use-JDK-Dynamic-Proxy-When" class="headerlink" title="Use JDK Dynamic Proxy When:"></a>Use JDK Dynamic Proxy When:</h3><ul><li>Your target classes implement interfaces</li><li>You want to avoid external dependencies</li><li>You’re working in environments with restricted class loading</li><li>Memory footprint is a concern</li></ul><h3 id="Use-CGLIB-When"><a href="#Use-CGLIB-When" class="headerlink" title="Use CGLIB When:"></a>Use CGLIB When:</h3><ul><li>Your target classes don’t implement interfaces</li><li>You need to proxy concrete classes</li><li>You need to proxy specific methods not defined in interfaces</li><li>You’re already using a framework that includes CGLIB (like Spring)</li></ul><h2 id="How-Spring-Framework-Uses-Proxies"><a href="#How-Spring-Framework-Uses-Proxies" class="headerlink" title="How Spring Framework Uses Proxies"></a>How Spring Framework Uses Proxies</h2><p>Spring Framework uses both proxy mechanisms depending on the situation:</p><ol><li><p><strong>For @Transactional, @Cacheable, and other AOP annotations:</strong></p><ul><li>If the target bean implements at least one interface: JDK Dynamic Proxy (by default)</li><li>If the target bean doesn’t implement any interface: CGLIB</li></ul></li><li><p><strong>Configuration:</strong></p><ul><li>Spring allows forcing CGLIB for all proxies via configuration:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Limitations-and-Considerations"><a href="#Limitations-and-Considerations" class="headerlink" title="Limitations and Considerations"></a>Limitations and Considerations</h2><h3 id="JDK-Dynamic-Proxy-Limitations"><a href="#JDK-Dynamic-Proxy-Limitations" class="headerlink" title="JDK Dynamic Proxy Limitations:"></a>JDK Dynamic Proxy Limitations:</h3><ul><li>Only works with interfaces</li><li>Cannot intercept calls within the same class</li><li>Proxy must be accessed through the interface type</li></ul><h3 id="CGLIB-Limitations"><a href="#CGLIB-Limitations" class="headerlink" title="CGLIB Limitations:"></a>CGLIB Limitations:</h3><ul><li>Cannot proxy final classes or methods</li><li>May have issues with certain constructors</li><li>Requires careful handling of class loaders</li><li>May conflict with security managers in restricted environments</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Both JDK Dynamic Proxy and CGLIB provide powerful mechanisms for implementing proxies in Java applications. Understanding the differences and appropriate use cases for each approach helps developers make informed decisions when designing systems that require method interception.</p><p>In modern Spring applications, you rarely need to implement these proxies manually, as Spring’s AOP capabilities handle the details for you. However, understanding the underlying mechanisms helps when debugging issues or when you need to implement custom proxy behavior outside of Spring’s built-in capabilities.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Proxy-Patterns-JDK-Dynamic-Proxy-vs-CGLIB&quot;&gt;&lt;a href=&quot;#Java-Proxy-Patterns-JDK-Dynamic-Proxy-vs-CGLIB&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Java Development" scheme="http://example.com/categories/Java-Development/"/>
    
    <category term="Design Patterns" scheme="http://example.com/categories/Java-Development/Design-Patterns/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
    <category term="Proxy Pattern" scheme="http://example.com/tags/Proxy-Pattern/"/>
    
    <category term="CGLIB" scheme="http://example.com/tags/CGLIB/"/>
    
    <category term="AOP" scheme="http://example.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Understanding HyperLogLog - Efficient Cardinality Estimation</title>
    <link href="http://example.com/2025/03/07/hyperloglog/"/>
    <id>http://example.com/2025/03/07/hyperloglog/</id>
    <published>2025-03-07T08:25:15.000Z</published>
    <updated>2025-08-07T06:24:21.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HyperLogLog-Efficient-Cardinality-Estimation-for-Big-Data"><a href="#HyperLogLog-Efficient-Cardinality-Estimation-for-Big-Data" class="headerlink" title="HyperLogLog: Efficient Cardinality Estimation for Big Data"></a>HyperLogLog: Efficient Cardinality Estimation for Big Data</h1><h2 id="The-Cardinality-Problem"><a href="#The-Cardinality-Problem" class="headerlink" title="The Cardinality Problem"></a>The Cardinality Problem</h2><p>In the world of big data, a common challenge is determining how many unique elements exist in a dataset without counting each one individually. For example:</p><ul><li>How many unique users visited a website today?</li><li>How many distinct search terms were used in the past hour?</li><li>How many different IP addresses connected to a server?</li></ul><p>When dealing with millions or billions of elements, storing each unique item to count them becomes prohibitively expensive in terms of memory. This is where probabilistic data structures like HyperLogLog come into play.</p><h2 id="What-is-HyperLogLog"><a href="#What-is-HyperLogLog" class="headerlink" title="What is HyperLogLog?"></a>What is HyperLogLog?</h2><p>HyperLogLog (HLL) is a probabilistic algorithm designed to estimate the cardinality (number of unique elements) in a dataset with high accuracy while using minimal memory. Developed by Philippe Flajolet and colleagues in 2007, it’s an evolution of the earlier LogLog algorithm with improved accuracy.</p><p>Key characteristics of HyperLogLog:</p><ul><li>Uses orders of magnitude less memory than exact counting methods</li><li>Provides estimates with typical error rates of 2-3%</li><li>Scales to count billions of unique items using only kilobytes of memory</li><li>Allows for distributed counting across multiple systems</li></ul><h2 id="How-HyperLogLog-Works"><a href="#How-HyperLogLog-Works" class="headerlink" title="How HyperLogLog Works"></a>How HyperLogLog Works</h2><p>The algorithm leverages probability theory and the distribution of leading zeros in hash values. Here’s a simplified explanation of the process:</p><h3 id="1-Hash-Function-Application"><a href="#1-Hash-Function-Application" class="headerlink" title="1. Hash Function Application"></a>1. Hash Function Application</h3><p>Each element in the dataset is processed through a hash function that produces a uniformly distributed binary value. This transforms any data type (strings, numbers, objects) into a standardized format.</p><h3 id="2-Register-Selection"><a href="#2-Register-Selection" class="headerlink" title="2. Register Selection"></a>2. Register Selection</h3><p>The first few bits of the hash value (typically 4-16 bits) are used to select one of 2^b registers (where b is the number of bits used). This divides the possible hash values into buckets, with each register responsible for tracking a subset of the data.</p><h3 id="3-Leading-Zeros-Counting"><a href="#3-Leading-Zeros-Counting" class="headerlink" title="3. Leading Zeros Counting"></a>3. Leading Zeros Counting</h3><p>For the selected register, we count the number of leading zeros (plus one) in the remaining bits of the hash value. This value represents the “rank” of the element.</p><h3 id="4-Register-Update"><a href="#4-Register-Update" class="headerlink" title="4. Register Update"></a>4. Register Update</h3><p>If the count of leading zeros is higher than the current value in the register, we update the register with this new value. This ensures each register maintains the maximum observed rank.</p><h3 id="5-Cardinality-Estimation"><a href="#5-Cardinality-Estimation" class="headerlink" title="5. Cardinality Estimation"></a>5. Cardinality Estimation</h3><p>After processing all elements, the algorithm combines the values from all registers using a harmonic mean and applies a correction factor to produce the final estimate.</p><h2 id="Example-Processing-a-Simple-String"><a href="#Example-Processing-a-Simple-String" class="headerlink" title="Example: Processing a Simple String"></a>Example: Processing a Simple String</h2><p>Let’s walk through how HyperLogLog would process the string “A great database is a great life”:</p><ol><li><p>Split into individual words: [“A”, “great”, “database”, “is”, “a”, “great”, “life”]</p></li><li><p>For each word:</p><ul><li>Hash the word to get a binary value</li><li>Use the first b bits (e.g., 3 bits) to select a register (0-7)</li><li>Count leading zeros in the remaining bits</li><li>Update the register if the count is higher than current value</li></ul></li><li><p>For duplicate words like “great”, the same register would be selected, but the value wouldn’t change if it’s already seen a higher rank.</p></li><li><p>After processing all words, the algorithm would apply the estimation formula:</p></li></ol><p><img src="/images/cardinality.png" alt="HyperLogLog Cardinality Formula"></p><p>Where:</p><ul><li>α is a constant (approximately 0.79402 for bias correction)</li><li>m is the number of registers</li><li>R[j] is the value stored in register j</li></ul><h2 id="Practical-Applications"><a href="#Practical-Applications" class="headerlink" title="Practical Applications"></a>Practical Applications</h2><p>HyperLogLog is widely used in systems that need to count unique items at scale:</p><ul><li><strong>Databases</strong>: Redis, PostgreSQL, and other databases use HLL for approximate COUNT DISTINCT operations</li><li><strong>Analytics Platforms</strong>: Google Analytics uses similar techniques to estimate unique visitors</li><li><strong>Network Monitoring</strong>: Tracking unique IP addresses in network traffic</li><li><strong>Ad Tech</strong>: Counting unique user impressions across advertising campaigns</li><li><strong>Search Engines</strong>: Estimating index sizes and query frequencies</li></ul><h2 id="Memory-Accuracy-Tradeoff"><a href="#Memory-Accuracy-Tradeoff" class="headerlink" title="Memory-Accuracy Tradeoff"></a>Memory-Accuracy Tradeoff</h2><p>One of HyperLogLog’s key advantages is its configurable precision. By adjusting the number of registers used, you can balance memory usage against accuracy:</p><table><thead><tr><th>Registers (2^b)</th><th>Memory Usage</th><th>Typical Error</th></tr></thead><tbody><tr><td>16 (2^4)</td><td>~96 bytes</td><td>~26%</td></tr><tr><td>64 (2^6)</td><td>~384 bytes</td><td>~13%</td></tr><tr><td>1024 (2^10)</td><td>~6 KB</td><td>~3.25%</td></tr><tr><td>16384 (2^14)</td><td>~96 KB</td><td>~0.81%</td></tr></tbody></table><p>This scalability makes HyperLogLog suitable for both resource-constrained environments and high-precision requirements.</p><h2 id="Limitations-and-Considerations"><a href="#Limitations-and-Considerations" class="headerlink" title="Limitations and Considerations"></a>Limitations and Considerations</h2><p>While HyperLogLog is powerful, it’s important to understand its limitations:</p><ul><li>It provides an estimate, not an exact count</li><li>Very small cardinalities may have higher relative error</li><li>The hash function quality affects accuracy</li><li>Merging HLL structures from different sources requires careful implementation</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>HyperLogLog represents an elegant solution to the cardinality estimation problem, offering a near-optimal balance between memory efficiency and accuracy. By trading a small amount of precision for dramatic memory savings, it enables analytics at scales that would otherwise be impractical.</p><p>Whether you’re building analytics systems, databases, or any application that needs to count unique items efficiently, understanding HyperLogLog provides a valuable tool in your algorithmic toolkit.</p><h2 id="Further-Reading"><a href="#Further-Reading" class="headerlink" title="Further Reading"></a>Further Reading</h2><ul><li>The original paper: “HyperLogLog: the analysis of a near-optimal cardinality estimation algorithm” by Flajolet et al.</li><li>Redis implementation of HyperLogLog (PFCOUNT, PFADD commands)</li><li>Google’s implementation in their BigQuery service</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HyperLogLog-Efficient-Cardinality-Estimation-for-Big-Data&quot;&gt;&lt;a href=&quot;#HyperLogLog-Efficient-Cardinality-Estimation-for-Big-Data&quot; clas</summary>
      
    
    
    
    <category term="Computer Science" scheme="http://example.com/categories/Computer-Science/"/>
    
    
    <category term="Data Structures" scheme="http://example.com/tags/Data-Structures/"/>
    
    <category term="Algorithms" scheme="http://example.com/tags/Algorithms/"/>
    
    <category term="Big Data" scheme="http://example.com/tags/Big-Data/"/>
    
    <category term="Probabilistic Data Structures" scheme="http://example.com/tags/Probabilistic-Data-Structures/"/>
    
    <category term="Performance Optimization" scheme="http://example.com/tags/Performance-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>HowManyBits</title>
    <link href="http://example.com/2024/12/19/HowManyBits/"/>
    <id>http://example.com/2024/12/19/HowManyBits/</id>
    <published>2024-12-19T06:00:27.000Z</published>
    <updated>2024-12-19T06:47:19.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSAPP-howManyBits"><a href="#CSAPP-howManyBits" class="headerlink" title="CSAPP - howManyBits"></a>CSAPP - howManyBits</h2><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two&#x27;s complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> b16, b8, b4, b2, b1, b0;</span><br><span class="line">  <span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  x = (sign&amp;~x)|(~sign&amp;x);</span><br><span class="line"></span><br><span class="line">  b16 = !!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  x = x &gt;&gt; b16;</span><br><span class="line">  b8 = !!(x&gt;&gt;<span class="number">8</span>)&lt;&lt;<span class="number">3</span>;</span><br><span class="line">  x = x &gt;&gt; b8;</span><br><span class="line">  b4 = !!(x&gt;&gt;<span class="number">4</span>)&lt;&lt;<span class="number">2</span>;</span><br><span class="line">  x = x &gt;&gt; b4;</span><br><span class="line">  b2 = !!(x&gt;&gt;<span class="number">2</span>)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  x = x &gt;&gt; b2;</span><br><span class="line">  b1 = !!(x&gt;&gt;<span class="number">1</span>);</span><br><span class="line">  x = x &gt;&gt; b1;</span><br><span class="line">  b0 = x;</span><br><span class="line">  <span class="keyword">return</span> b16 + b8 + b4 + b2 + b1 + b0 + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Explaination"><a href="#3-Explaination" class="headerlink" title="3. Explaination"></a>3. Explaination</h3><h4 id="First-part-of-the-code"><a href="#First-part-of-the-code" class="headerlink" title="First part of the code"></a>First part of the code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">x = (sign&amp;~x)|(~sign&amp;x)</span><br></pre></td></tr></table></figure><p>After this operation, when x is positive, we do not change x value, when x is negative, we reverse all bits of x,</p><p>More details: when x is negative, sign is all 1,we will get ~x in (sign &amp; ~x) rather than (0000 … 000 &amp; x) which reverse all bits of x and and vice versa.</p><p>Now, the bits x have plus 1 sign bit is the result we want to get.</p><h4 id="Second-part-of-the-code"><a href="#Second-part-of-the-code" class="headerlink" title="Second part of the code"></a>Second part of the code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b16;</span><br><span class="line">b16 = !!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  x = x &gt;&gt; b16;</span><br></pre></td></tr></table></figure><p>In this segment of code, we first right left the x,which get the high 16 bits, and then judge them whether contain 1,</p><ul><li>if it does contain,represent we need low 16 bits, b16 &#x3D; 16.</li><li>if not, b16 &#x3D; 0, represents we don’t need hgih 16 bits.</li></ul><p>Then depend on b16 equals to 0 or 16 , we move bits of x.</p><ul><li>b16 &#x3D; 16, means we should focus on high 16 bits in the future</li><li>b16 &#x3D; 0, means we should drop high 16 bits and focus on low 16 bits.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSAPP-howManyBits&quot;&gt;&lt;a href=&quot;#CSAPP-howManyBits&quot; class=&quot;headerlink&quot; title=&quot;CSAPP - howManyBits&quot;&gt;&lt;/a&gt;CSAPP - howManyBits&lt;/h2&gt;&lt;h3 id=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>IsTMax</title>
    <link href="http://example.com/2024/12/17/IsMax/"/>
    <id>http://example.com/2024/12/17/IsMax/</id>
    <published>2024-12-17T07:14:03.000Z</published>
    <updated>2024-12-17T08:35:00.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSAPP-isTmax"><a href="#CSAPP-isTmax" class="headerlink" title="CSAPP isTmax"></a>CSAPP isTmax</h2><h3 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i = x+<span class="number">1</span>;<span class="comment">//Tmin,1000...</span></span><br><span class="line">  x=x+i;<span class="comment">//-1,1111...</span></span><br><span class="line">  x=~x;<span class="comment">//0,0000...</span></span><br><span class="line">  i=!i;<span class="comment">//exclude x=0xffff...</span></span><br><span class="line">  x=x+i;<span class="comment">//exclude x=0xffff...</span></span><br><span class="line">  <span class="keyword">return</span> !x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Imitation"><a href="#3-Imitation" class="headerlink" title="3. Imitation"></a>3. Imitation</h3><h4 id="Suppose-x-is-TMax-which-is-2147483647-or-0x7FFFFFFF"><a href="#Suppose-x-is-TMax-which-is-2147483647-or-0x7FFFFFFF" class="headerlink" title="Suppose x is TMax which is 2147483647 or 0x7FFFFFFF"></a>Suppose x is TMax which is 2147483647 or 0x7FFFFFFF</h4><blockquote><p>x Binary representation: 01111111 11111111 11111111 11111111</p></blockquote><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>int i &#x3D; x + 1;</p><blockquote><p>i Binary representation: 10000000 00000000 00000000 00000000</p></blockquote><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>x &#x3D; x + i</p><blockquote><p>Binary representation x : 11111111 11111111 11111111 11111111</p></blockquote><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>x &#x3D; ~x</p><blockquote><p>Binary representation x : 00000000 00000000 00000000 00000000</p></blockquote><h4 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h4><p>i &#x3D; !i</p><p>before: i is the minimum integer<br>after: i &#x3D; 0</p><blockquote><p>Binary representation: 00000000 00000000 00000000 00000000</p></blockquote><p>This is the most scenario.</p><p>notes:</p><blockquote><p>if i &#x3D; 1, only happend when original x is -1</p></blockquote><blockquote><p>x &#x3D; -1 binary representation is : 11111111 11111111 11111111 11111111</p></blockquote><h4 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h4><p>x &#x3D; x + i</p><blockquote><p>result -&gt; x &#x3D; 0</p></blockquote><h4 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h4><p>return !x</p><blockquote><p>result true</p></blockquote><h3 id="4-Explaination"><a href="#4-Explaination" class="headerlink" title="4. Explaination"></a>4. Explaination</h3><p>Basic thoughts: Considering we need to transfer a integer value x to a boolean value,<br>we could first transfer integer value to zero , then reverse zero to non-zero which could also represent true.</p><p>The imitation gives us a true example.<br>First of all, we should know about what is the maximum, two’s complement number.<br>It is represented as 0 following 1 to the end.</p><p>So, we first add 1 to it, making the result to minimum integer value,<br>which is represented as 1 following 0 to the end.</p><p>And, then use maximum integer value add to minimum integer value which<br>can get -1 as result.</p><p>Next, do bit operation, reversing each bit 1 to 0 , which can get 0 as result.</p><p>Now, we get the result what we want.Commonly, we just need to do !x to return.</p><p>But considering a special scenario, which is x equals to -1 which binary representation is all 1.<br>when x &#x3D; -1 , x + 1 &#x3D; 0 (i), x + i still all 1 in binary representation (x),<br>~x &#x3D; 0, is the same result as the maximum integer value.</p><p>So, we need to exclude this context.<br>we could use flag i to mark it, to test i whetther equals to zero,<br>if i equals to zero, we need to exclude.<br>We use !i to add to the result which we get formerly.<br>when the input is maximum integer value , !i will be zero and will not affect the final result.<br>if the input is not , it will affect the final result to false;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSAPP-isTmax&quot;&gt;&lt;a href=&quot;#CSAPP-isTmax&quot; class=&quot;headerlink&quot; title=&quot;CSAPP isTmax&quot;&gt;&lt;/a&gt;CSAPP isTmax&lt;/h2&gt;&lt;h3 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Getting Started with React - A Beginner&#39;s Guide</title>
    <link href="http://example.com/2024/12/15/react/"/>
    <id>http://example.com/2024/12/15/react/</id>
    <published>2024-12-15T06:59:38.000Z</published>
    <updated>2025-08-07T06:20:55.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Getting-Started-with-React-A-Beginner’s-Guide"><a href="#Getting-Started-with-React-A-Beginner’s-Guide" class="headerlink" title="Getting Started with React: A Beginner’s Guide"></a>Getting Started with React: A Beginner’s Guide</h1><p>React is a popular JavaScript library for building user interfaces, particularly single-page applications. This guide will walk you through setting up your first React project and understanding its core concepts.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Before starting with React development, ensure you have these tools installed:</p><ul><li><strong>Node.js</strong>: The JavaScript runtime environment that powers React development</li><li><strong>Visual Studio Code</strong>: A recommended code editor with excellent React support</li></ul><h2 id="Creating-a-React-Project-with-Vite"><a href="#Creating-a-React-Project-with-Vite" class="headerlink" title="Creating a React Project with Vite"></a>Creating a React Project with Vite</h2><p>Vite is a modern build tool that provides a faster and leaner development experience compared to traditional tools like Create React App.</p><h3 id="Step-1-Initialize-a-New-Project"><a href="#Step-1-Initialize-a-New-Project" class="headerlink" title="Step 1: Initialize a New Project"></a>Step 1: Initialize a New Project</h3><ol><li>Open your terminal and navigate to your desired project location</li><li>Run the following command:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><ol start="3"><li>Follow the interactive prompts:<ul><li>Enter your project name</li><li>Select “React” as your framework</li><li>Choose either “JavaScript” or “TypeScript” as your variant</li></ul></li></ol><h3 id="Step-2-Install-Dependencies"><a href="#Step-2-Install-Dependencies" class="headerlink" title="Step 2: Install Dependencies"></a>Step 2: Install Dependencies</h3><p>Navigate to your project directory and install the required packages:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-project-name</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="Step-3-Start-the-Development-Server"><a href="#Step-3-Start-the-Development-Server" class="headerlink" title="Step 3: Start the Development Server"></a>Step 3: Start the Development Server</h3><p>Launch your application in development mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>This command starts a local development server, typically at <code>http://localhost:5173/</code>, where you can see your application running.</p><h2 id="Understanding-the-Project-Structure"><a href="#Understanding-the-Project-Structure" class="headerlink" title="Understanding the Project Structure"></a>Understanding the Project Structure</h2><p>A React project created with Vite has several important files and directories. Let’s explore the key ones:</p><h3 id="The-Entry-Point-main-jsx"><a href="#The-Entry-Point-main-jsx" class="headerlink" title="The Entry Point: main.jsx"></a>The Entry Point: main.jsx</h3><p>This file serves as the application’s entry point, similar to a <code>main()</code> function in other programming languages:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StrictMode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.jsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Key points to understand:</p><ul><li><code>createRoot</code> establishes a React root in the DOM element with ID “root”</li><li><code>StrictMode</code> is a tool for highlighting potential problems in your application</li><li>The entire application is rendered inside the <code>&lt;App /&gt;</code> component</li></ul><h3 id="The-Root-Component-App-jsx"><a href="#The-Root-Component-App-jsx" class="headerlink" title="The Root Component: App.jsx"></a>The Root Component: App.jsx</h3><p>This component serves as the container for your entire application:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>In this example, <code>App</code> renders a single <code>Header</code> component. As your application grows, you’ll add more components here.</p><h3 id="Creating-Components-Header-jsx"><a href="#Creating-Components-Header-jsx" class="headerlink" title="Creating Components: Header.jsx"></a>Creating Components: Header.jsx</h3><p>Components are the building blocks of React applications. Here’s a simple header component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Header</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>About<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Services<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span>;</span><br></pre></td></tr></table></figure><p>Each component:</p><ul><li>Is defined as a JavaScript function</li><li>Returns JSX (JavaScript XML) that describes what should be rendered</li><li>Can be exported and imported into other components</li></ul><h2 id="Working-with-Variables-in-JSX"><a href="#Working-with-Variables-in-JSX" class="headerlink" title="Working with Variables in JSX"></a>Working with Variables in JSX</h2><p>One of React’s powerful features is the ability to embed JavaScript expressions directly in your JSX using curly braces <code>&#123;&#125;</code>.</p><h3 id="Example-Dynamic-Content-in-a-Footer-Component"><a href="#Example-Dynamic-Content-in-a-Footer-Component" class="headerlink" title="Example: Dynamic Content in a Footer Component"></a>Example: Dynamic Content in a Footer Component</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Footer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;copy;</span> &#123;new Date().getFullYear()&#125; Your website name<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Footer</span>;</span><br></pre></td></tr></table></figure><p>In this example, <code>&#123;new Date().getFullYear()&#125;</code> dynamically inserts the current year into the copyright notice. The curly braces tell React to evaluate the JavaScript expression inside and include its result in the rendered output.</p><h2 id="React-State-Management"><a href="#React-State-Management" class="headerlink" title="React State Management"></a>React State Management</h2><p>State is one of the most important concepts in React. It allows components to create and manage their own data.</p><h3 id="Example-A-Simple-Counter"><a href="#Example-A-Simple-Counter" class="headerlink" title="Example: A Simple Counter"></a>Example: A Simple Counter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// useState returns an array with two elements:</span></span><br><span class="line">  <span class="comment">// 1. The current state value</span></span><br><span class="line">  <span class="comment">// 2. A function to update the state</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Counter</span>;</span><br></pre></td></tr></table></figure><p>Key points about state:</p><ul><li>Initialize state with <code>useState(initialValue)</code></li><li>Never modify state directly; always use the setter function</li><li>State updates trigger component re-rendering</li></ul><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Now that you understand the basics of React, you can explore more advanced concepts:</p><ul><li>Props for passing data between components</li><li>Effect hooks for side effects and lifecycle events</li><li>Context API for global state management</li><li>React Router for navigation</li><li>Styling approaches (CSS Modules, styled-components, etc.)</li></ul><p>Practice by expanding your project with new components and features. React’s component-based architecture makes it easy to build complex UIs from simple, reusable pieces.</p><h2 id="Resources-for-Further-Learning"><a href="#Resources-for-Further-Learning" class="headerlink" title="Resources for Further Learning"></a>Resources for Further Learning</h2><ul><li><a href="https://react.dev/">Official React Documentation</a></li><li><a href="https://vitejs.dev/">Vite Documentation</a></li><li><a href="https://react.dev/learn/react-developer-tools">React DevTools Browser Extension</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Getting-Started-with-React-A-Beginner’s-Guide&quot;&gt;&lt;a href=&quot;#Getting-Started-with-React-A-Beginner’s-Guide&quot; class=&quot;headerlink&quot; title=&quot;Ge</summary>
      
    
    
    
    <category term="Web Development" scheme="http://example.com/categories/Web-Development/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="Frontend" scheme="http://example.com/tags/Frontend/"/>
    
    <category term="Web Development" scheme="http://example.com/tags/Web-Development/"/>
    
    <category term="Vite" scheme="http://example.com/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>Random</title>
    <link href="http://example.com/2024/12/04/Random/"/>
    <id>http://example.com/2024/12/04/Random/</id>
    <published>2024-12-04T13:45:06.000Z</published>
    <updated>2024-12-04T14:11:28.319Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Random-in-Cpp"><a href="#Random-in-Cpp" class="headerlink" title="Random in Cpp"></a>Random in Cpp</h3><p>When we want to get a random value in cpp. we could</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="First"><a href="#First" class="headerlink" title="First,"></a>First,</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::random_device rd;</span><br><span class="line"><span class="type">int</span> random_value = <span class="built_in">rd</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This could get a random value. However it is hardware-based and OS-provided entropy source, usually used in low-level random number generators or system events.</p><h3 id="Second"><a href="#Second" class="headerlink" title="Second,"></a>Second,</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::mt19937 s_RandomEngine</span><br></pre></td></tr></table></figure><p>This is the actually random value generator we want to use in the daily business.<br>It can generate pseudo-random numbers efficientl.<br>But remember, you need to seed it by your random_device like this</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::random_device rd;</span><br><span class="line"><span class="function">std::mt19937 <span class="title">engine</span><span class="params">(rd())</span></span>;</span><br><span class="line"><span class="type">int</span> random_value = <span class="built_in">engine</span>();</span><br></pre></td></tr></table></figure><p>The running result is as follows ⬇️<br><img src="/images/random_engine.png" alt="alt text"></p><h3 id="Third，"><a href="#Third，" class="headerlink" title="Third，"></a>Third，</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::uniform_int_distribution&lt;std::mt19937::result_type&gt; <span class="title">distribution</span><span class="params">(<span class="number">0</span>, <span class="number">100</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>This could limit the random value to a specific range, in my example is 0 to 100.<br>You need to feed it using engine which i mention above.<br>Here is an example :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Initialize a random number engine with a random seed</span></span><br><span class="line">    <span class="function">std::mt19937 <span class="title">engine</span><span class="params">(std::random_device&#123;&#125;())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define a uniform integer distribution over the range [0, 100]</span></span><br><span class="line">    <span class="function">std::uniform_int_distribution&lt;std::mt19937::result_type&gt; <span class="title">distribution</span><span class="params">(<span class="number">0</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate a random number using the distribution and engine</span></span><br><span class="line">    <span class="type">int</span> random_value = <span class="built_in">distribution</span>(engine);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Random value: &quot;</span> &lt;&lt; random_value &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great , this example you could execute by yourself. :)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Random-in-Cpp&quot;&gt;&lt;a href=&quot;#Random-in-Cpp&quot; class=&quot;headerlink&quot; title=&quot;Random in Cpp&quot;&gt;&lt;/a&gt;Random in Cpp&lt;/h3&gt;&lt;p&gt;When we want to get a rand</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Understanding HashMap Capacity Initialization in Java</title>
    <link href="http://example.com/2024/12/01/HashMap/"/>
    <id>http://example.com/2024/12/01/HashMap/</id>
    <published>2024-12-01T05:25:53.000Z</published>
    <updated>2025-08-07T06:18:39.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Understanding-HashMap’s-Power-of-Two-Sizing"><a href="#Understanding-HashMap’s-Power-of-Two-Sizing" class="headerlink" title="Understanding HashMap’s Power-of-Two Sizing"></a>Understanding HashMap’s Power-of-Two Sizing</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Java’s HashMap is one of the most commonly used data structures, offering O(1) average-case performance for lookups. One of its interesting implementation details is how it initializes its internal capacity. In this post, I’ll explain the elegant bit manipulation technique used to ensure the HashMap’s size is always a power of two.</p><h2 id="The-tableSizeFor-Method"><a href="#The-tableSizeFor-Method" class="headerlink" title="The tableSizeFor Method"></a>The tableSizeFor Method</h2><p>At the heart of HashMap’s initialization is the <code>tableSizeFor</code> method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> -<span class="number">1</span> &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This method takes a requested capacity and returns the next power of two that’s equal to or greater than the input. Let’s break down how it works step by step.</p><h2 id="Step-by-Step-Explanation"><a href="#Step-by-Step-Explanation" class="headerlink" title="Step-by-Step Explanation"></a>Step-by-Step Explanation</h2><h3 id="1-Subtracting-One-from-Capacity"><a href="#1-Subtracting-One-from-Capacity" class="headerlink" title="1. Subtracting One from Capacity"></a>1. Subtracting One from Capacity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cap - <span class="number">1</span></span><br></pre></td></tr></table></figure><p>The method first subtracts 1 from the requested capacity. This handles the case where the input is already a power of two. Without this subtraction, a power-of-two input would be rounded up to the next power of two.</p><h3 id="2-Counting-Leading-Zeros"><a href="#2-Counting-Leading-Zeros" class="headerlink" title="2. Counting Leading Zeros"></a>2. Counting Leading Zeros</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer.numberOfLeadingZeros(cap - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>The <code>numberOfLeadingZeros</code> method counts how many zero bits precede the highest-order (“leftmost”) one-bit in the two’s complement binary representation of the input.</p><p>For example, with input 13:</p><ul><li>Binary representation: <code>00000000 00000000 00000000 00001101</code> (32-bit)</li><li>The highest one-bit is at position 3 (counting from right, 0-indexed)</li><li>Leading zeros: 32 - 4 &#x3D; 28</li></ul><h3 id="3-Creating-a-Bit-Mask"><a href="#3-Creating-a-Bit-Mask" class="headerlink" title="3. Creating a Bit Mask"></a>3. Creating a Bit Mask</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span> &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>The value <code>-1</code> in binary is all ones: <code>11111111 11111111 11111111 11111111</code></p><p>The <code>&gt;&gt;&gt;</code> operator is an unsigned right shift, which shifts bits to the right and fills the leftmost bits with zeros.</p><p>Continuing our example with 13:</p><ul><li><code>-1 &gt;&gt;&gt; 28</code> shifts all bits 28 positions to the right</li><li>Result: <code>00000000 00000000 00000000 00001111</code> (decimal 15)</li></ul><p>This creates a mask with the same number of 1 bits as the highest bit position in our original number.</p><h3 id="4-Adding-One-to-Get-the-Next-Power-of-Two"><a href="#4-Adding-One-to-Get-the-Next-Power-of-Two" class="headerlink" title="4. Adding One to Get the Next Power of Two"></a>4. Adding One to Get the Next Power of Two</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Finally, we add 1 to the result:</p><ul><li>15 + 1 &#x3D; 16</li></ul><p>This gives us 16, which is the next power of two greater than or equal to 13.</p><h2 id="Why-This-Works"><a href="#Why-This-Works" class="headerlink" title="Why This Works"></a>Why This Works</h2><p>This technique works because:</p><ol><li>It identifies the position of the highest bit in the number</li><li>It creates a mask of all 1s up to that position</li><li>Adding 1 to this mask “carries” into the next bit position, creating a power of two</li></ol><h2 id="Edge-Cases"><a href="#Edge-Cases" class="headerlink" title="Edge Cases"></a>Edge Cases</h2><p>The method also handles edge cases:</p><ul><li>If the result is negative, it returns 1</li><li>If the result exceeds the maximum capacity, it returns the maximum capacity</li></ul><h2 id="Practical-Benefits"><a href="#Practical-Benefits" class="headerlink" title="Practical Benefits"></a>Practical Benefits</h2><p>Using powers of two for the HashMap size provides several benefits:</p><ol><li><strong>Efficient indexing</strong>: Finding a bucket becomes a simple bit mask operation: <code>hash &amp; (capacity - 1)</code></li><li><strong>Optimized memory usage</strong>: Helps prevent excessive memory allocation</li><li><strong>Improved performance</strong>: Reduces the likelihood of hash collisions</li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The <code>tableSizeFor</code> method is a brilliant example of bit manipulation to solve a practical problem efficiently. By ensuring the HashMap’s capacity is always a power of two, Java optimizes both memory usage and access performance. Understanding these implementation details helps us appreciate the careful engineering behind Java’s core data structures.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Understanding-HashMap’s-Power-of-Two-Sizing&quot;&gt;&lt;a href=&quot;#Understanding-HashMap’s-Power-of-Two-Sizing&quot; class=&quot;headerlink&quot; title=&quot;Unders</summary>
      
    
    
    
    <category term="Programming" scheme="http://example.com/categories/Programming/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Data Structures" scheme="http://example.com/tags/Data-Structures/"/>
    
    <category term="Algorithms" scheme="http://example.com/tags/Algorithms/"/>
    
    <category term="Bit Operations" scheme="http://example.com/tags/Bit-Operations/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Kubernetes Architecture</title>
    <link href="http://example.com/2024/11/20/Kubernetes/"/>
    <id>http://example.com/2024/11/20/Kubernetes/</id>
    <published>2024-11-20T11:56:36.000Z</published>
    <updated>2025-08-07T06:22:32.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-Architecture-A-Comprehensive-Overview"><a href="#Kubernetes-Architecture-A-Comprehensive-Overview" class="headerlink" title="Kubernetes Architecture: A Comprehensive Overview"></a>Kubernetes Architecture: A Comprehensive Overview</h1><p>Kubernetes (often abbreviated as K8s) is an open-source platform designed to automate deploying, scaling, and operating application containers. Understanding its architecture is crucial for effectively working with container orchestration in production environments.</p><h2 id="Core-Architecture-Components"><a href="#Core-Architecture-Components" class="headerlink" title="Core Architecture Components"></a>Core Architecture Components</h2><p>Kubernetes follows a master-worker architecture, divided into two main planes:</p><ol><li><strong>Control Plane</strong> (formerly called Master Node)</li><li><strong>Data Plane</strong> (Worker Nodes)</li></ol><p><img src="/../images/Kubernetes.png" alt="Kubernetes Architecture Overview"></p><h2 id="Control-Plane-Components"><a href="#Control-Plane-Components" class="headerlink" title="Control Plane Components"></a>Control Plane Components</h2><p>The Control Plane is the brain of a Kubernetes cluster, responsible for making global decisions about the cluster and detecting&#x2F;responding to cluster events.</p><h3 id="API-Server-kube-apiserver"><a href="#API-Server-kube-apiserver" class="headerlink" title="API Server (kube-apiserver)"></a>API Server (kube-apiserver)</h3><p>The API server is the front-end of the Kubernetes control plane, exposing the Kubernetes API. It serves as the primary interface for:</p><ul><li>Processing REST operations</li><li>Validating and configuring API objects</li><li>Serving as the communication hub for all cluster components</li></ul><p>Key responsibilities:</p><ul><li>Authentication and authorization of API requests</li><li>Request validation and processing</li><li>Resource admission control</li><li>Serving as the gateway to the cluster state</li></ul><h3 id="Controller-Manager-kube-controller-manager"><a href="#Controller-Manager-kube-controller-manager" class="headerlink" title="Controller Manager (kube-controller-manager)"></a>Controller Manager (kube-controller-manager)</h3><p>The Controller Manager runs controller processes that regulate the state of the cluster. Logically, each controller is a separate process, but they’re compiled into a single binary and run as a single process to reduce complexity.</p><p>Some key controllers include:</p><ul><li><strong>Node Controller</strong>: Monitors node health and responds when nodes go down</li><li><strong>Replication Controller</strong>: Ensures the correct number of pod replicas are running</li><li><strong>Endpoints Controller</strong>: Populates the Endpoints object (joins Services &amp; Pods)</li><li><strong>Service Account &amp; Token Controllers</strong>: Create default accounts and API access tokens</li></ul><h3 id="Scheduler-kube-scheduler"><a href="#Scheduler-kube-scheduler" class="headerlink" title="Scheduler (kube-scheduler)"></a>Scheduler (kube-scheduler)</h3><p>The Scheduler watches for newly created pods with no assigned node and selects a node for them to run on.</p><p>Scheduling decisions consider:</p><ul><li>Resource requirements</li><li>Hardware&#x2F;software&#x2F;policy constraints</li><li>Affinity&#x2F;anti-affinity specifications</li><li>Data locality</li><li>Inter-workload interference</li><li>Deadlines</li></ul><h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><p>etcd is a consistent and highly-available key-value store used as Kubernetes’ backing store for all cluster data.</p><p>Key characteristics:</p><ul><li>Distributed configuration store</li><li>Stores the entire state of the cluster</li><li>Implements leader election for controller managers</li><li>Provides watch functionality for change notifications</li><li>Offers strong consistency guarantees</li></ul><h2 id="Data-Plane-Components"><a href="#Data-Plane-Components" class="headerlink" title="Data Plane Components"></a>Data Plane Components</h2><p>The Data Plane consists of worker nodes that run applications and cloud workflows.</p><h3 id="Kubelet"><a href="#Kubelet" class="headerlink" title="Kubelet"></a>Kubelet</h3><p>The kubelet is an agent that runs on each node in the cluster, ensuring containers are running in a Pod.</p><p>Key responsibilities:</p><ul><li><strong>Pod Management</strong>: Takes a set of PodSpecs provided through various mechanisms and ensures the containers described are running and healthy</li><li><strong>Image Management</strong>: Works with the container runtime to pull images and start containers</li><li><strong>Health Monitoring</strong>: Continuously monitors container and node health, reporting to the API server</li><li><strong>Volume Management</strong>: Mounts volumes specified in pod configurations</li></ul><h3 id="Kube-proxy"><a href="#Kube-proxy" class="headerlink" title="Kube-proxy"></a>Kube-proxy</h3><p>Kube-proxy maintains network rules on nodes, implementing part of the Kubernetes Service concept.</p><p>Key functions:</p><ul><li>Enables communication between pods across nodes</li><li>Handles in-cluster networking and load balancing</li><li>Manages iptables&#x2F;IPVS rules for service discovery</li><li>Implements forwarding rules for traffic routing</li></ul><h3 id="Container-Runtime"><a href="#Container-Runtime" class="headerlink" title="Container Runtime"></a>Container Runtime</h3><p>The container runtime is the software responsible for running containers. Kubernetes supports several container runtimes through the Container Runtime Interface (CRI):</p><ul><li>containerd</li><li>CRI-O</li><li>Docker Engine (via cri-dockerd)</li><li>Any implementation of the Kubernetes CRI</li></ul><h2 id="Pod-The-Basic-Building-Block"><a href="#Pod-The-Basic-Building-Block" class="headerlink" title="Pod: The Basic Building Block"></a>Pod: The Basic Building Block</h2><p>A Pod is the smallest deployable unit in Kubernetes and represents a single instance of a running process in a cluster.</p><p>Key characteristics:</p><ul><li>Contains one or more containers</li><li>Shares network namespace (IP address and port space)</li><li>Shares storage volumes</li><li>Has specifications for how to run the containers</li></ul><p>Pods are:</p><ul><li>Ephemeral (not designed to run forever)</li><li>Scheduled on nodes</li><li>The basic unit of scaling in Kubernetes</li></ul><h2 id="Communication-Flow"><a href="#Communication-Flow" class="headerlink" title="Communication Flow"></a>Communication Flow</h2><ol><li>Users interact with the cluster through the API server</li><li>The API server validates and processes requests</li><li>Controllers watch for changes and take action to maintain desired state</li><li>The scheduler assigns pods to nodes</li><li>Kubelets on nodes create and manage containers according to pod specifications</li><li>Kube-proxy maintains networking rules for service discovery</li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Understanding Kubernetes architecture is essential for effective deployment and management of containerized applications. Each component plays a vital role in maintaining the cluster’s desired state and ensuring applications run reliably.</p><p>For deeper insights into Kubernetes components and how they interact, refer to the <a href="https://kubernetes.io/docs/concepts/overview/components/">official Kubernetes documentation</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kubernetes-Architecture-A-Comprehensive-Overview&quot;&gt;&lt;a href=&quot;#Kubernetes-Architecture-A-Comprehensive-Overview&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="Cloud Computing" scheme="http://example.com/categories/Cloud-Computing/"/>
    
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
    <category term="Cloud Native" scheme="http://example.com/tags/Cloud-Native/"/>
    
    <category term="Container Orchestration" scheme="http://example.com/tags/Container-Orchestration/"/>
    
    <category term="DevOps" scheme="http://example.com/tags/DevOps/"/>
    
    <category term="Infrastructure" scheme="http://example.com/tags/Infrastructure/"/>
    
  </entry>
  
  <entry>
    <title>RegisterName</title>
    <link href="http://example.com/2024/11/04/RegisterName/"/>
    <id>http://example.com/2024/11/04/RegisterName/</id>
    <published>2024-11-04T06:00:33.000Z</published>
    <updated>2024-11-04T06:38:07.468Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to operating systems, especially for x86-64 architecture,we often encounter various types of registers, and their names can be confusing.Today, I’ll explain them in detail.</p><h2 id="Registers-in-the-x86-64-Architecture"><a href="#Registers-in-the-x86-64-Architecture" class="headerlink" title="Registers in the x86-64 Architecture"></a>Registers in the x86-64 Architecture</h2><table><thead><tr><th>Register</th><th>Full Name</th><th>Usage</th></tr></thead><tbody><tr><td>RAX</td><td>Accumulator Register</td><td>be used for arithmetic and logical operations.</td></tr><tr><td>RBX</td><td>Base Register</td><td>be used as a base pointer for memory access.</td></tr><tr><td>RCX</td><td>Counter Register</td><td>be used as a loop counter in LOOP and shift&#x2F;rotate instructions.</td></tr><tr><td>RDX</td><td>Data Register</td><td>be used in multiplication and division operations</td></tr><tr><td>RSI</td><td>Source Register</td><td>be used as a source pointer for string and memory operations</td></tr><tr><td>RDI</td><td>Destination Register</td><td>be used as the destination pointer in string operation</td></tr><tr><td>RBP</td><td>Base Pointer Register</td><td>used as a frame pointer for stack frames in function calls.</td></tr><tr><td>RSP</td><td>Stack Register</td><td>holds the address of the top of the stack</td></tr><tr><td>R9</td><td>Additional General-Purpose Register</td><td>provides extra general-purpose storage</td></tr><tr><td>…</td><td>…</td><td>…</td></tr><tr><td>R15</td><td>Additional General-Purpose Register</td><td>provides extra general-purpose storage</td></tr></tbody></table><h2 id="Register-History"><a href="#Register-History" class="headerlink" title="Register History"></a>Register History</h2><p><img src="/images/IntegerRegister.png" alt="Integer Register"></p><ul><li><strong>On a 16-bit machine</strong>, there are 16 bits (0-15) available for storage. The AL register represents the lower 8 bits (0-7), while AH represents the upper 8 bits (8-15). The AX register represents all 16 bits combined.</li><li><strong>On a 32-bit machine</strong>, registers are prefixed with E (for “Extended”) to indicate a 32-bit extension of the original 16-bit registers.</li><li><strong>On a 64-bit machine</strong>, registers are prefixed with R (for “Register”) to signify the 64-bit version of the register.</li></ul><h2 id="Summary-of-Naming"><a href="#Summary-of-Naming" class="headerlink" title="Summary of Naming"></a>Summary of Naming</h2><p>The first eight registers (RAX, RBX, RCX, RDX, RSI, RDI, RBP, and RSP) retain their original x86 names due to their historic roles in assembly programming and compatibility requirements. The names of the newer registers (R8 to R15) simply follow a numerical sequence (R8, R9, etc.), reflecting their additional, general-purpose nature without specific historical functions. These additional registers allow x86-64 to handle more data in parallel, which is essential for modern, complex applications.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When it comes to operating systems, especially for x86-64 architecture,we often encounter various types of registers, and their names can</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/11/04/hello-world/"/>
    <id>http://example.com/2024/11/04/hello-world/</id>
    <published>2024-11-04T02:03:31.445Z</published>
    <updated>2024-11-04T02:03:31.445Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
