<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>react</title>
    <link href="/2024/12/15/react/"/>
    <url>/2024/12/15/react/</url>
    
    <content type="html"><![CDATA[<h2 id="React-For-beginner"><a href="#React-For-beginner" class="headerlink" title="React For beginner"></a>React For beginner</h2><h3 id="1-Preparation"><a href="#1-Preparation" class="headerlink" title="1. Preparation"></a>1. Preparation</h3><ul><li>Download nodejs</li><li>Install Visual Studio Code</li></ul><h3 id="2-Use-Vite-to-create-react-project"><a href="#2-Use-Vite-to-create-react-project" class="headerlink" title="2, Use Vite to create react project"></a>2, Use Vite to create react project</h3><ul><li>find a path as your website root project.</li><li>open the terminal , write<blockquote><p>npm create vite@latest</p></blockquote></li><li>then choose what you want like<blockquote><p>project name : your react project name<br>select a framework: react or vue or etc.</p></blockquote><ul><li>select a variant like : javascript or typescript</li></ul></li></ul><h3 id="3-Install-the-dependencies-and-start-the-project"><a href="#3-Install-the-dependencies-and-start-the-project" class="headerlink" title="3. Install the dependencies and start the project"></a>3. Install the dependencies and start the project</h3><ul><li><p>npm install<br>the commmand above is to install the dependencies your project needs</p></li><li><p>npm run dev<br>the command above is to run the project which is dev environmemnt</p></li></ul><h3 id="4-Introduction-to-the-structure-of-project"><a href="#4-Introduction-to-the-structure-of-project" class="headerlink" title="4. Introduction to the structure of project"></a>4. Introduction to the structure of project</h3><ul><li>First, let focuse on the file &#x2F;src&#x2F;main.jsx.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">StrictMode</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.jsx&quot;</span>;<br><br><span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>)).<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>this file acts as javascript main function, it has single component which is App componet</p><ul><li>Second, let’s focus on App.jsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> reactLogo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./assets/react.svg&#x27;</span><br><span class="hljs-keyword">import</span> viteLogo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;/vite.svg&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Header&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span>/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p>this App component contains single component Header</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My website<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Services<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Contact<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Header</span>;<br></code></pre></td></tr></table></figure><p>So,at this moment, you could know about a little about the structure of react project , and how to organize the components.</p><h3 id="5-Variable-in-the-react"><a href="#5-Variable-in-the-react" class="headerlink" title="5. Variable in the react"></a>5. Variable in the react</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Footer</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> &#123;new Date().getFullYear()&#125; Your website name<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Footer</span>;<br></code></pre></td></tr></table></figure><p>the above code is about a Footer component, and i want to show different year depending on current year, which i need to import the variable, the format of the usage of variable is to wrapper it with <strong>{}</strong> and so we could write programming code syntax in it to show the current full year</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Random</title>
    <link href="/2024/12/04/Random/"/>
    <url>/2024/12/04/Random/</url>
    
    <content type="html"><![CDATA[<h3 id="Random-in-Cpp"><a href="#Random-in-Cpp" class="headerlink" title="Random in Cpp"></a>Random in Cpp</h3><p>When we want to get a random value in cpp. we could</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="First"><a href="#First" class="headerlink" title="First,"></a>First,</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::random_device rd;<br><span class="hljs-type">int</span> random_value = <span class="hljs-built_in">rd</span>();<br><br></code></pre></td></tr></table></figure><p>This could get a random value. However it is hardware-based and OS-provided entropy source, usually used in low-level random number generators or system events.</p><h3 id="Second"><a href="#Second" class="headerlink" title="Second,"></a>Second,</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::mt19937 s_RandomEngine<br></code></pre></td></tr></table></figure><p>This is the actually random value generator we want to use in the daily business.<br>It can generate pseudo-random numbers efficientl.<br>But remember, you need to seed it by your random_device like this</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::random_device rd;<br><span class="hljs-function">std::mt19937 <span class="hljs-title">engine</span><span class="hljs-params">(rd())</span></span>;<br><span class="hljs-type">int</span> random_value = <span class="hljs-built_in">engine</span>();<br></code></pre></td></tr></table></figure><p>The running result is as follows ⬇️<br><img src="/images/random_engine.png" alt="alt text"></p><h3 id="Third，"><a href="#Third，" class="headerlink" title="Third，"></a>Third，</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::uniform_int_distribution&lt;std::mt19937::result_type&gt; <span class="hljs-title">distribution</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>This could limit the random value to a specific range, in my example is 0 to 100.<br>You need to feed it using engine which i mention above.<br>Here is an example :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Initialize a random number engine with a random seed</span><br>    <span class="hljs-function">std::mt19937 <span class="hljs-title">engine</span><span class="hljs-params">(std::random_device&#123;&#125;())</span></span>;<br><br>    <span class="hljs-comment">// Define a uniform integer distribution over the range [0, 100]</span><br>    <span class="hljs-function">std::uniform_int_distribution&lt;std::mt19937::result_type&gt; <span class="hljs-title">distribution</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)</span></span>;<br><br>    <span class="hljs-comment">// Generate a random number using the distribution and engine</span><br>    <span class="hljs-type">int</span> random_value = <span class="hljs-built_in">distribution</span>(engine);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Random value: &quot;</span> &lt;&lt; random_value &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Great , this example you could execute by yourself. :)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HashMap</title>
    <link href="/2024/12/01/HashMap/"/>
    <url>/2024/12/01/HashMap/</url>
    
    <content type="html"><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="1-Initialize"><a href="#1-Initialize" class="headerlink" title="1. Initialize"></a>1. Initialize</h3><p>Today, I want to explain how HashMap in Java to initialize the threshold using bit operation.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = <span class="hljs-number">-1</span> &gt;&gt;&gt; Integer.<span class="hljs-built_in">numberOfLeadingZeros</span>(cap - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>The above is the original code, we can find that the input parameter is the capacity of the HashMap, and the return value is the threshold of HashMap.</p><ul><li><p>First,<br>the (cap - 1) is the last index of HashMap array</p></li><li><p>Second,<br>Integer.numberOfLeadingZeros method could get the counts of the leading zeros in (cap - 1)<br>in front of the default bits of system(like 32-bit)</p><p>Here, i will give you an example.</p><p>For example, Integer.numberOfLeadingZeros(13).<br>13 which is 1101 –&gt; four bits in the lower bits of the 32-bit in your system.<br>0000 0000 0000 1101 which is all bits it shows in the system.<br>and the method function could return the nunber of zeros which in front of 1111,which is 32 - 4 &#x3D; 28</p></li><li><p>Third, -1 &gt;&gt;&gt; Integer.numberOfLeadingZeros(13)<br>-1 in the binary(32-bit) is 1111 1111 1111 1111<br>the sign of &gt;&gt;&gt; represents unsigned right shift operator,which fills zero in the right bits(higher bits).</p><p>So, in my example -1 &gt;&gt;&gt; 28 which gets is 0000 0000 0000 1111<br>the progress is 1111 1111 1111 1111 &#x3D;&#x3D;&#x3D;&gt; 0000 0000 0000 1111<br>the original binary code is shifted 28 bits to the right</p><p>And, the result is 15+1 &#x3D; 16, which is greater than 13 and is a power of 2.</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes</title>
    <link href="/2024/11/20/Kubernetes/"/>
    <url>/2024/11/20/Kubernetes/</url>
    
    <content type="html"><![CDATA[<h2 id="Kybernetes-Explained"><a href="#Kybernetes-Explained" class="headerlink" title="Kybernetes Explained"></a>Kybernetes Explained</h2><h3 id="control-plane-master-Node"><a href="#control-plane-master-Node" class="headerlink" title="control plane(master Node)"></a>control plane(master Node)</h3><h4 id="A-kbue-api-server"><a href="#A-kbue-api-server" class="headerlink" title="A. kbue-api server"></a>A. <strong>kbue-api server</strong></h4><p>expose the kubernetes api, which is used by all components to interact with the cluster</p><p>validate and process api requests ,used for AAA –&gt; authorization accounting authentication</p><h4 id="B-control-manager"><a href="#B-control-manager" class="headerlink" title="B. control manager"></a>B. <strong>control manager</strong></h4><p>node or deployment controller</p><h4 id="C-kube-scheduler"><a href="#C-kube-scheduler" class="headerlink" title="C.kube scheduler"></a>C.<strong>kube scheduler</strong></h4><p>decide which node should run depending on the resource or other factors</p><h4 id="D-Etcd-local-database"><a href="#D-Etcd-local-database" class="headerlink" title="D. Etcd(local database)"></a>D. <strong>Etcd</strong>(local database)</h4><p>a distributed key-value store that stores all cluster data, including configuration , state and metadata.</p><p>hold the entire data of the cluster</p><h3 id="node-plane"><a href="#node-plane" class="headerlink" title="node plane"></a>node plane</h3><h4 id="A-kube-let"><a href="#A-kube-let" class="headerlink" title="A. kube let"></a>A. kube let</h4><p>input : pod specifications from the control plane , either pulled via the Kubernetes API server or provided directly through local files</p><p>Execution: Works with the container runtime to pull images, create containers, and start them on the node</p><p>Monitoring: Continuously monitors the containers and nodes for health and status updates, sending this information back to the API server</p><h4 id="B-kube-proxy"><a href="#B-kube-proxy" class="headerlink" title="B. kube proxy"></a>B. kube proxy</h4><p>enable communication between nodes</p><h4 id="C-pod"><a href="#C-pod" class="headerlink" title="C. pod"></a>C. pod</h4><p>contains docker-containers</p><p><img src="/../images/Kubernetes.png" alt="alt text"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RegisterName</title>
    <link href="/2024/11/04/RegisterName/"/>
    <url>/2024/11/04/RegisterName/</url>
    
    <content type="html"><![CDATA[<p>When it comes to operating systems, especially for x86-64 architecture,we often encounter various types of registers, and their names can be confusing.Today, I’ll explain them in detail.</p><h2 id="Registers-in-the-x86-64-Architecture"><a href="#Registers-in-the-x86-64-Architecture" class="headerlink" title="Registers in the x86-64 Architecture"></a>Registers in the x86-64 Architecture</h2><table><thead><tr><th>Register</th><th>Full Name</th><th>Usage</th></tr></thead><tbody><tr><td>RAX</td><td>Accumulator Register</td><td>be used for arithmetic and logical operations.</td></tr><tr><td>RBX</td><td>Base Register</td><td>be used as a base pointer for memory access.</td></tr><tr><td>RCX</td><td>Counter Register</td><td>be used as a loop counter in LOOP and shift&#x2F;rotate instructions.</td></tr><tr><td>RDX</td><td>Data Register</td><td>be used in multiplication and division operations</td></tr><tr><td>RSI</td><td>Source Register</td><td>be used as a source pointer for string and memory operations</td></tr><tr><td>RDI</td><td>Destination Register</td><td>be used as the destination pointer in string operation</td></tr><tr><td>RBP</td><td>Base Pointer Register</td><td>used as a frame pointer for stack frames in function calls.</td></tr><tr><td>RSP</td><td>Stack Register</td><td>holds the address of the top of the stack</td></tr><tr><td>R9</td><td>Additional General-Purpose Register</td><td>provides extra general-purpose storage</td></tr><tr><td>…</td><td>…</td><td>…</td></tr><tr><td>R15</td><td>Additional General-Purpose Register</td><td>provides extra general-purpose storage</td></tr></tbody></table><h2 id="Register-History"><a href="#Register-History" class="headerlink" title="Register History"></a>Register History</h2><p><img src="/images/IntegerRegister.png" alt="Integer Register"></p><ul><li><strong>On a 16-bit machine</strong>, there are 16 bits (0-15) available for storage. The AL register represents the lower 8 bits (0-7), while AH represents the upper 8 bits (8-15). The AX register represents all 16 bits combined.</li><li><strong>On a 32-bit machine</strong>, registers are prefixed with E (for “Extended”) to indicate a 32-bit extension of the original 16-bit registers.</li><li><strong>On a 64-bit machine</strong>, registers are prefixed with R (for “Register”) to signify the 64-bit version of the register.</li></ul><h2 id="Summary-of-Naming"><a href="#Summary-of-Naming" class="headerlink" title="Summary of Naming"></a>Summary of Naming</h2><p>The first eight registers (RAX, RBX, RCX, RDX, RSI, RDI, RBP, and RSP) retain their original x86 names due to their historic roles in assembly programming and compatibility requirements. The names of the newer registers (R8 to R15) simply follow a numerical sequence (R8, R9, etc.), reflecting their additional, general-purpose nature without specific historical functions. These additional registers allow x86-64 to handle more data in parallel, which is essential for modern, complex applications.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/04/hello-world/"/>
    <url>/2024/11/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
